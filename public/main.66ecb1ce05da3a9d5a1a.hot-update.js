/*! For license information please see main.66ecb1ce05da3a9d5a1a.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateprada("main",{"./styles/index.scss":(e,s,t)=>{t.r(s);var o=t("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(o),e.hot.accept(void 0,o)},"./app/components/Canvas/About/index.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>r});var o=t("./node_modules/ogl/src/core/Transform.js"),i=t("./node_modules/ogl/src/extras/Plane.js"),l=t("./app/components/Canvas/About/Gallery.js"),a=t("./node_modules/lodash/lodash.js");class r{constructor({gl:e,scene:s,sizes:t}){this.gl=e,this.scene=s,this.sizes=t,this.group=new o.Transform,this.createGeometry(),this.createGalleries(),this.onResize,this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new i.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about_gallery"),this.galleries=(0,a.map)(this.galleriesElements,((e,s)=>new l.default({element:e,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes,index:s})))}show(){(0,a.map)(this.galleries,(e=>{e.show()}))}hide(){(0,a.map)(this.galleries,(e=>{e.hide()}))}onResize(e){(0,a.map)(this.galleries,(s=>s.onResize(e)))}onTouchDown(e){(0,a.map)(this.galleries,(s=>s.onTouchDown(e)))}onTouchMove(e){(0,a.map)(this.galleries,(s=>s.onTouchMove(e)))}onTouchUp(e){(0,a.map)(this.galleries,(s=>s.onTouchUp(e)))}onWheel({pixelX:e,pixelY:s}){}update(e){(0,a.map)(this.galleries,(s=>{s.update(e)}))}destroy(){this.scene.removeChild(this.group)}}}},(function(e){e.h=()=>"64bca35c14863050b97a"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi42NmVjYjFjZTA1ZGEzYTlkNWExYS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7dUZBSU0sSUFBSUEsRUFBWSxFQUFRLDBFQUFSLENBQW9GQyxFQUFPQyxHQUFJLENBQUMsV0FBYSxHQUFHLFFBQVMsSUFDeklELEVBQU9FLElBQUlDLFFBQVFKLEdBQ25CQyxFQUFPRSxJQUFJRSxZQUFPQyxFQUFXTiw4UUNGcEIsTUFBTU8sRUFDakJDLFdBQUFBLEVBQWEsR0FBRUMsRUFBRSxNQUFFQyxFQUFLLE1BQUVDLElBQ3RCQyxLQUFLSCxHQUFLQSxFQUNWRyxLQUFLRixNQUFRQSxFQUNiRSxLQUFLRCxNQUFRQSxFQUViQyxLQUFLQyxNQUFRLElBQUlDLEVBQUFBLFVBRWpCRixLQUFLRyxpQkFDTEgsS0FBS0ksa0JBRUxKLEtBQUtLLFNBRUxMLEtBQUtDLE1BQU1LLFVBQVVOLEtBQUtGLE9BQzFCRSxLQUFLTyxNQUNULENBRUFKLGNBQUFBLEdBQ0lILEtBQUtRLFNBQVcsSUFBSUMsRUFBQUEsTUFBTVQsS0FBS0gsR0FDbkMsQ0FFQU8sZUFBQUEsR0FDSUosS0FBS1Usa0JBQW9CQyxTQUFTQyxpQkFBaUIsa0JBRW5EWixLQUFLYSxXQUFZQyxFQUFBQSxFQUFBQSxLQUFJZCxLQUFLVSxtQkFBbUIsQ0FBQ0ssRUFBU0MsSUFDNUMsSUFBSUMsRUFBQUEsUUFBUSxDQUNmRixVQUNBUCxTQUFVUixLQUFLUSxTQUNmWCxHQUFJRyxLQUFLSCxHQUNUQyxNQUFPRSxLQUFLQyxNQUNaRixNQUFPQyxLQUFLRCxNQUNaaUIsV0FHWixDQUdBVCxJQUFBQSxJQUNJTyxFQUFBQSxFQUFBQSxLQUFJZCxLQUFLYSxXQUFZSyxJQUNqQkEsRUFBUVgsTUFBTSxHQUV0QixDQUVBWSxJQUFBQSxJQUNJTCxFQUFBQSxFQUFBQSxLQUFJZCxLQUFLYSxXQUFZSyxJQUNqQkEsRUFBUUMsTUFBTSxHQUV0QixDQUlBZCxRQUFBQSxDQUFVZSxJQUNOTixFQUFBQSxFQUFBQSxLQUFJZCxLQUFLYSxXQUFXSyxHQUFXQSxFQUFRYixTQUFTZSxJQUNwRCxDQUVBQyxXQUFBQSxDQUFhRCxJQUNUTixFQUFBQSxFQUFBQSxLQUFJZCxLQUFLYSxXQUFXSyxHQUFXQSxFQUFRRyxZQUFZRCxJQUN2RCxDQUVBRSxXQUFBQSxDQUFhRixJQUNUTixFQUFBQSxFQUFBQSxLQUFJZCxLQUFLYSxXQUFXSyxHQUFXQSxFQUFRSSxZQUFZRixJQUN2RCxDQUVBRyxTQUFBQSxDQUFXSCxJQUNQTixFQUFBQSxFQUFBQSxLQUFJZCxLQUFLYSxXQUFXSyxHQUFXQSxFQUFRSyxVQUFVSCxJQUNyRCxDQUVBSSxPQUFBQSxFQUFTLE9BQUVDLEVBQU0sT0FBRUMsSUFDbkIsQ0FHQUMsTUFBQUEsQ0FBUUMsSUFDSmQsRUFBQUEsRUFBQUEsS0FBSWQsS0FBS2EsV0FBV0ssSUFDaEJBLEVBQVFTLE9BQU9DLEVBQU8sR0FFOUIsQ0FHQUMsT0FBQUEsR0FDSTdCLEtBQUtGLE1BQU1nQyxZQUFZOUIsS0FBS0MsTUFDaEMsa0JDcEZKOEIsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWRhLy4vc3R5bGVzL2luZGV4LnNjc3M/ZjBmZiIsIndlYnBhY2s6Ly9wcmFkYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9BYm91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFkYS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTcyMzcxNzcwOTY0N1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJwdWJsaWNQYXRoXCI6XCJcIixcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsImltcG9ydCB7IFBsYW5lLCBUcmFuc2Zvcm0gfSBmcm9tICdvZ2wnXG5pbXBvcnQgR2FsbGVyeSBmcm9tICcuL0dhbGxlcnkuanMnXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdsb2Rhc2gnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWUge1xuICAgIGNvbnN0cnVjdG9yICh7IGdsLCBzY2VuZSwgc2l6ZXMgfSkge1xuICAgICAgICB0aGlzLmdsID0gZ2xcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xuXG4gICAgICAgIHRoaXMuZ3JvdXAgPSBuZXcgVHJhbnNmb3JtKClcblxuICAgICAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KClcbiAgICAgICAgdGhpcy5jcmVhdGVHYWxsZXJpZXMoKVxuXG4gICAgICAgIHRoaXMub25SZXNpemVcblxuICAgICAgICB0aGlzLmdyb3VwLnNldFBhcmVudCh0aGlzLnNjZW5lKVxuICAgICAgICB0aGlzLnNob3coKVxuICAgIH1cblxuICAgIGNyZWF0ZUdlb21ldHJ5ICgpIHtcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKVxuICAgIH1cblxuICAgIGNyZWF0ZUdhbGxlcmllcyAoKSB7XG4gICAgICAgIHRoaXMuZ2FsbGVyaWVzRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWJvdXRfZ2FsbGVyeScpXG5cbiAgICAgICAgdGhpcy5nYWxsZXJpZXMgPSBtYXAodGhpcy5nYWxsZXJpZXNFbGVtZW50cywgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdhbGxlcnkoe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXG4gICAgICAgICAgICAgICAgZ2w6IHRoaXMuZ2wsXG4gICAgICAgICAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXG4gICAgICAgICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXMsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gICAgICAgICAgU2hvd1xuICAgIHNob3cgKCkge1xuICAgICAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiB7XG4gICAgICAgICAgICBnYWxsZXJ5LnNob3coKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGhpZGUgKCkge1xuICAgICAgICBtYXAodGhpcy5nYWxsZXJpZXMsIChnYWxsZXJ5KSA9PiB7XG4gICAgICAgICAgICBnYWxsZXJ5LmhpZGUoKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8vICAgICAgICAgICAgICAgICAgIEV2ZW50c1xuXG4gICAgb25SZXNpemUgKGV2ZW50KSB7XG4gICAgICAgIG1hcCh0aGlzLmdhbGxlcmllcywgZ2FsbGVyeSA9PiBnYWxsZXJ5Lm9uUmVzaXplKGV2ZW50KSlcbiAgICB9XG5cbiAgICBvblRvdWNoRG93biAoZXZlbnQpIHtcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkub25Ub3VjaERvd24oZXZlbnQpKVxuICAgIH1cblxuICAgIG9uVG91Y2hNb3ZlIChldmVudCkge1xuICAgICAgICBtYXAodGhpcy5nYWxsZXJpZXMsIGdhbGxlcnkgPT4gZ2FsbGVyeS5vblRvdWNoTW92ZShldmVudCkpXG4gICAgfVxuXG4gICAgb25Ub3VjaFVwIChldmVudCkge1xuICAgICAgICBtYXAodGhpcy5nYWxsZXJpZXMsIGdhbGxlcnkgPT4gZ2FsbGVyeS5vblRvdWNoVXAoZXZlbnQpKVxuICAgIH1cblxuICAgIG9uV2hlZWwgKHsgcGl4ZWxYLCBwaXhlbFkgfSkge1xuICAgIH1cblxuICAgIC8vICAgICAgICAgIExvb3BcbiAgICB1cGRhdGUgKHNjcm9sbCkge1xuICAgICAgICBtYXAodGhpcy5nYWxsZXJpZXMsIGdhbGxlcnkgPT4ge1xuICAgICAgICAgICAgZ2FsbGVyeS51cGRhdGUoc2Nyb2xsKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8vICAgICAgICAgIERlc3Ryb3lcbiAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLmdyb3VwKVxuICAgIH1cbn1cbiIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjY0YmNhMzVjMTQ4NjMwNTBiOTdhXCIpIl0sIm5hbWVzIjpbImNzc1JlbG9hZCIsIm1vZHVsZSIsImlkIiwiaG90IiwiZGlzcG9zZSIsImFjY2VwdCIsInVuZGVmaW5lZCIsIkhvbWUiLCJjb25zdHJ1Y3RvciIsImdsIiwic2NlbmUiLCJzaXplcyIsInRoaXMiLCJncm91cCIsIlRyYW5zZm9ybSIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlR2FsbGVyaWVzIiwib25SZXNpemUiLCJzZXRQYXJlbnQiLCJzaG93IiwiZ2VvbWV0cnkiLCJQbGFuZSIsImdhbGxlcmllc0VsZW1lbnRzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2FsbGVyaWVzIiwibWFwIiwiZWxlbWVudCIsImluZGV4IiwiR2FsbGVyeSIsImdhbGxlcnkiLCJoaWRlIiwiZXZlbnQiLCJvblRvdWNoRG93biIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFVwIiwib25XaGVlbCIsInBpeGVsWCIsInBpeGVsWSIsInVwZGF0ZSIsInNjcm9sbCIsImRlc3Ryb3kiLCJyZW1vdmVDaGlsZCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==