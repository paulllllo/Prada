/*! For license information please see main.6f8d6e0c220da20342d3.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateprada("main",{"./styles/index.scss":(e,s,t)=>{t.r(s);var i=t("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)},"./app/components/Canvas/transition.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>n});var i=t("./node_modules/ogl/src/extras/Plane.js"),o=t("./node_modules/ogl/src/core/Program.js"),a=t("./node_modules/ogl/src/core/Mesh.js"),l=t("./app/shaders/plane-vertex.glsl"),r=t("./app/shaders/plane-fragment.glsl");const n=class{constructor({collections:e,gl:s,scene:t,sizes:o,url:a}){this.collections=e,this.gl=s,this.url=a,this.scene=t,this.sizes=o,this.geometry=new i.Plane(this.gl),this.extra={x:0,y:0}}createProgram(e){this.program=new o.Program(this.gl,{fragment:r.default,vertex:l.default,uniforms:{uAlpha:{value:1},tMap:{value:e}}})}createMesh(e){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.position.z=.01*e.position.z,this.mesh.setParent(this.scene)}setElement(e){if(console.log("element***",e),"collections"===e.id){const{index:s,medias:t}=e,i=t[s];this.createProgram(i.texture),this.createMesh(i.mesh),this.transition="detail"}else this.createProgram(e.texture),this.createMesh(e),this.transition="collections"}animate(e,s){GSAP.timeline({})}}}},(function(e){e.h=()=>"44d1d9cd741871d28588"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi42ZjhkNmUwYzIyMGRhMjAzNDJkMy5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7dUZBSU0sSUFBSUEsRUFBWSxFQUFRLDBFQUFSLENBQW9GQyxFQUFPQyxHQUFJLENBQUMsV0FBYSxHQUFHLFFBQVMsSUFDeklELEVBQU9FLElBQUlDLFFBQVFKLEdBQ25CQyxFQUFPRSxJQUFJRSxZQUFPQyxFQUFXTiwrU0NBbkMsY0FDSU8sV0FBQUEsRUFBYSxZQUFFQyxFQUFXLEdBQUVDLEVBQUUsTUFBRUMsRUFBSyxNQUFFQyxFQUFLLElBQUVDLElBQzFDQyxLQUFLTCxZQUFjQSxFQUNuQkssS0FBS0osR0FBS0EsRUFDVkksS0FBS0QsSUFBTUEsRUFDWEMsS0FBS0gsTUFBUUEsRUFDYkcsS0FBS0YsTUFBUUEsRUFFYkUsS0FBS0MsU0FBVyxJQUFJQyxFQUFBQSxNQUFNRixLQUFLSixJQUcvQkksS0FBS0csTUFBUSxDQUNUQyxFQUFHLEVBQ0hDLEVBQUcsRUFFWCxDQUVBQyxhQUFBQSxDQUFlQyxHQUNYUCxLQUFLUSxRQUFVLElBQUlDLEVBQUFBLFFBQVFULEtBQUtKLEdBQUksQ0FDaENjLFNBQVEsVUFDUkMsT0FBTSxVQUNOQyxTQUFVLENBQ05DLE9BQVEsQ0FBRUMsTUFBTyxHQUNqQkMsS0FBTSxDQUFFRCxNQUFPUCxLQUczQixDQUVBUyxVQUFBQSxDQUFZQyxHQUNSakIsS0FBS2lCLEtBQU8sSUFBSUMsRUFBQUEsS0FBS2xCLEtBQUtKLEdBQUksQ0FDMUJLLFNBQVVELEtBQUtDLFNBQ2ZPLFFBQVNSLEtBQUtRLFVBR2xCUixLQUFLaUIsS0FBS0UsTUFBTWYsRUFBSWEsRUFBS0UsTUFBTWYsRUFDL0JKLEtBQUtpQixLQUFLRSxNQUFNZCxFQUFJWSxFQUFLRSxNQUFNZCxFQUMvQkwsS0FBS2lCLEtBQUtFLE1BQU1DLEVBQUlILEVBQUtFLE1BQU1DLEVBRS9CcEIsS0FBS2lCLEtBQUtJLFNBQVNqQixFQUFJYSxFQUFLSSxTQUFTakIsRUFDckNKLEtBQUtpQixLQUFLSSxTQUFTaEIsRUFBSVksRUFBS0ksU0FBU2hCLEVBQ3JDTCxLQUFLaUIsS0FBS0ksU0FBU0QsRUFBc0IsSUFBbEJILEVBQUtJLFNBQVNELEVBRXJDcEIsS0FBS2lCLEtBQUtLLFVBQVV0QixLQUFLSCxNQUM3QixDQUVBMEIsVUFBQUEsQ0FBWUMsR0FFUixHQURBQyxRQUFRQyxJQUFJLGFBQWNGLEdBQ1AsZ0JBQWZBLEVBQVFuQyxHQUFzQixDQUM5QixNQUFNLE1BQUVzQyxFQUFLLE9BQUVDLEdBQVdKLEVBQ3BCSyxFQUFRRCxFQUFPRCxHQUVyQjNCLEtBQUtNLGNBQWN1QixFQUFNdEIsU0FDekJQLEtBQUtnQixXQUFXYSxFQUFNWixNQUV0QmpCLEtBQUs4QixXQUFhLFFBQ3RCLE1BQ0k5QixLQUFLTSxjQUFja0IsRUFBUWpCLFNBQzNCUCxLQUFLZ0IsV0FBV1EsR0FFaEJ4QixLQUFLOEIsV0FBYSxhQUUxQixDQUdBQyxPQUFBQSxDQUFTZCxFQUFNZSxHQUNNQyxLQUFLQyxTQUFTLENBRS9CLEVBQ0osa0JDMUVKQyxFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhZGEvLi9zdHlsZXMvaW5kZXguc2Nzcz9mMGZmIiwid2VicGFjazovL3ByYWRhLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vcHJhZGEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3MjM3MTg2Mjg1MjdcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiXCIsXCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiLCIvLyBpbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuaW1wb3J0IHsgTWVzaCwgUGxhbmUsIFByb2dyYW0gfSBmcm9tICdvZ2wnXG5cbmltcG9ydCB2ZXJ0ZXggZnJvbSAnLi4vLi4vc2hhZGVycy9wbGFuZS12ZXJ0ZXguZ2xzbCdcbmltcG9ydCBmcmFnbWVudCBmcm9tICcuLi8uLi9zaGFkZXJzL3BsYW5lLWZyYWdtZW50Lmdsc2wnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvciAoeyBjb2xsZWN0aW9ucywgZ2wsIHNjZW5lLCBzaXplcywgdXJsIH0pIHtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAgIHRoaXMuZ2wgPSBnbFxuICAgICAgICB0aGlzLnVybCA9IHVybFxuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmVcbiAgICAgICAgdGhpcy5zaXplcyA9IHNpemVzXG5cbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnJiYgR2VvICoqJywgdGhpcy5nZW9tZXRyeSlcblxuICAgICAgICB0aGlzLmV4dHJhID0ge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVByb2dyYW0gKHRleHR1cmUpIHtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcy5nbCwge1xuICAgICAgICAgICAgZnJhZ21lbnQsXG4gICAgICAgICAgICB2ZXJ0ZXgsXG4gICAgICAgICAgICB1bmlmb3Jtczoge1xuICAgICAgICAgICAgICAgIHVBbHBoYTogeyB2YWx1ZTogMSB9LFxuICAgICAgICAgICAgICAgIHRNYXA6IHsgdmFsdWU6IHRleHR1cmUgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNyZWF0ZU1lc2ggKG1lc2gpIHtcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xuICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXG4gICAgICAgICAgICBwcm9ncmFtOiB0aGlzLnByb2dyYW1cbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueCA9IG1lc2guc2NhbGUueFxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueSA9IG1lc2guc2NhbGUueVxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueiA9IG1lc2guc2NhbGUuelxuXG4gICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID0gbWVzaC5wb3NpdGlvbi54XG4gICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi55ID0gbWVzaC5wb3NpdGlvbi55XG4gICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi56ID0gbWVzaC5wb3NpdGlvbi56ICogMC4wMVxuXG4gICAgICAgIHRoaXMubWVzaC5zZXRQYXJlbnQodGhpcy5zY2VuZSlcbiAgICB9XG5cbiAgICBzZXRFbGVtZW50IChlbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlbGVtZW50KioqJywgZWxlbWVudClcbiAgICAgICAgaWYgKGVsZW1lbnQuaWQgPT09ICdjb2xsZWN0aW9ucycpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5kZXgsIG1lZGlhcyB9ID0gZWxlbWVudFxuICAgICAgICAgICAgY29uc3QgbWVkaWEgPSBtZWRpYXNbaW5kZXhdXG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJvZ3JhbShtZWRpYS50ZXh0dXJlKVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVNZXNoKG1lZGlhLm1lc2gpXG5cbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbiA9ICdkZXRhaWwnXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByb2dyYW0oZWxlbWVudC50ZXh0dXJlKVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVNZXNoKGVsZW1lbnQpXG5cbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbiA9ICdjb2xsZWN0aW9ucydcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vICAgICAgICAgIEFuaW1hdGlvblxuICAgIGFuaW1hdGUgKG1lc2gsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHRpbWVsaW5lID0gR1NBUC50aW1lbGluZSh7XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICB9XG59XG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCI0NGQxZDljZDc0MTg3MWQyODU4OFwiKSJdLCJuYW1lcyI6WyJjc3NSZWxvYWQiLCJtb2R1bGUiLCJpZCIsImhvdCIsImRpc3Bvc2UiLCJhY2NlcHQiLCJ1bmRlZmluZWQiLCJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb25zIiwiZ2wiLCJzY2VuZSIsInNpemVzIiwidXJsIiwidGhpcyIsImdlb21ldHJ5IiwiUGxhbmUiLCJleHRyYSIsIngiLCJ5IiwiY3JlYXRlUHJvZ3JhbSIsInRleHR1cmUiLCJwcm9ncmFtIiwiUHJvZ3JhbSIsImZyYWdtZW50IiwidmVydGV4IiwidW5pZm9ybXMiLCJ1QWxwaGEiLCJ2YWx1ZSIsInRNYXAiLCJjcmVhdGVNZXNoIiwibWVzaCIsIk1lc2giLCJzY2FsZSIsInoiLCJwb3NpdGlvbiIsInNldFBhcmVudCIsInNldEVsZW1lbnQiLCJlbGVtZW50IiwiY29uc29sZSIsImxvZyIsImluZGV4IiwibWVkaWFzIiwibWVkaWEiLCJ0cmFuc2l0aW9uIiwiYW5pbWF0ZSIsImNhbGxiYWNrIiwiR1NBUCIsInRpbWVsaW5lIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9