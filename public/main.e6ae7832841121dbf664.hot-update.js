/*! For license information please see main.e6ae7832841121dbf664.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateprada("main",{"./styles/index.scss":(e,s,t)=>{t.r(s);var i=t("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)},"./app/components/Canvas/transition.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>n});var i=t("./node_modules/ogl/src/extras/Plane.js"),o=t("./node_modules/ogl/src/core/Program.js"),a=t("./node_modules/ogl/src/core/Mesh.js"),l=t("./app/shaders/plane-vertex.glsl"),r=t("./app/shaders/plane-fragment.glsl");const n=class{constructor({collections:e,gl:s,scene:t,sizes:o,url:a}){this.collections=e,this.gl=s,this.url=a,this.scene=t,this.sizes=o,this.geometry=new i.Plane(this.gl),this.extra={x:0,y:0}}createProgram(e){this.program=new o.Program(this.gl,{fragment:r.default,vertex:l.default,uniforms:{uAlpha:{value:1},tMap:{value:e}}})}createMesh(e){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.position.z=.01*e.position.z,this.mesh.setParent(this.scene)}setElement(e){if(console.log("element***",e),"collections"===e.id){const{index:s,medias:t}=e,i=t[s];this.createProgram(i.texture),this.createMesh(i.mesh),this.transition="detail"}else this.createProgram(e.texture),this.createMesh(e),this.transition="collections"}animate(e,s){cons}}}},(function(e){e.h=()=>"b00f1923e7b7fb276754"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5lNmFlNzgzMjg0MTEyMWRiZjY2NC5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7dUZBSU0sSUFBSUEsRUFBWSxFQUFRLDBFQUFSLENBQW9GQyxFQUFPQyxHQUFJLENBQUMsV0FBYSxHQUFHLFFBQVMsSUFDeklELEVBQU9FLElBQUlDLFFBQVFKLEdBQ25CQyxFQUFPRSxJQUFJRSxZQUFPQyxFQUFXTiwrU0NBbkMsY0FDSU8sV0FBQUEsRUFBYSxZQUFFQyxFQUFXLEdBQUVDLEVBQUUsTUFBRUMsRUFBSyxNQUFFQyxFQUFLLElBQUVDLElBQzFDQyxLQUFLTCxZQUFjQSxFQUNuQkssS0FBS0osR0FBS0EsRUFDVkksS0FBS0QsSUFBTUEsRUFDWEMsS0FBS0gsTUFBUUEsRUFDYkcsS0FBS0YsTUFBUUEsRUFFYkUsS0FBS0MsU0FBVyxJQUFJQyxFQUFBQSxNQUFNRixLQUFLSixJQUcvQkksS0FBS0csTUFBUSxDQUNUQyxFQUFHLEVBQ0hDLEVBQUcsRUFFWCxDQUVBQyxhQUFBQSxDQUFlQyxHQUNYUCxLQUFLUSxRQUFVLElBQUlDLEVBQUFBLFFBQVFULEtBQUtKLEdBQUksQ0FDaENjLFNBQVEsVUFDUkMsT0FBTSxVQUNOQyxTQUFVLENBQ05DLE9BQVEsQ0FBRUMsTUFBTyxHQUNqQkMsS0FBTSxDQUFFRCxNQUFPUCxLQUczQixDQUVBUyxVQUFBQSxDQUFZQyxHQUNSakIsS0FBS2lCLEtBQU8sSUFBSUMsRUFBQUEsS0FBS2xCLEtBQUtKLEdBQUksQ0FDMUJLLFNBQVVELEtBQUtDLFNBQ2ZPLFFBQVNSLEtBQUtRLFVBR2xCUixLQUFLaUIsS0FBS0UsTUFBTWYsRUFBSWEsRUFBS0UsTUFBTWYsRUFDL0JKLEtBQUtpQixLQUFLRSxNQUFNZCxFQUFJWSxFQUFLRSxNQUFNZCxFQUMvQkwsS0FBS2lCLEtBQUtFLE1BQU1DLEVBQUlILEVBQUtFLE1BQU1DLEVBRS9CcEIsS0FBS2lCLEtBQUtJLFNBQVNqQixFQUFJYSxFQUFLSSxTQUFTakIsRUFDckNKLEtBQUtpQixLQUFLSSxTQUFTaEIsRUFBSVksRUFBS0ksU0FBU2hCLEVBQ3JDTCxLQUFLaUIsS0FBS0ksU0FBU0QsRUFBc0IsSUFBbEJILEVBQUtJLFNBQVNELEVBRXJDcEIsS0FBS2lCLEtBQUtLLFVBQVV0QixLQUFLSCxNQUM3QixDQUVBMEIsVUFBQUEsQ0FBWUMsR0FFUixHQURBQyxRQUFRQyxJQUFJLGFBQWNGLEdBQ1AsZ0JBQWZBLEVBQVFuQyxHQUFzQixDQUM5QixNQUFNLE1BQUVzQyxFQUFLLE9BQUVDLEdBQVdKLEVBQ3BCSyxFQUFRRCxFQUFPRCxHQUVyQjNCLEtBQUtNLGNBQWN1QixFQUFNdEIsU0FDekJQLEtBQUtnQixXQUFXYSxFQUFNWixNQUV0QmpCLEtBQUs4QixXQUFhLFFBQ3RCLE1BQ0k5QixLQUFLTSxjQUFja0IsRUFBUWpCLFNBQzNCUCxLQUFLZ0IsV0FBV1EsR0FFaEJ4QixLQUFLOEIsV0FBYSxhQUUxQixDQUdBQyxPQUFBQSxDQUFTZCxFQUFNZSxHQUNYQyxJQUNKLGtCQ3hFSkMsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWRhLy4vc3R5bGVzL2luZGV4LnNjc3M/ZjBmZiIsIndlYnBhY2s6Ly9wcmFkYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL3ByYWRhL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzIzNzE4NTk4OTk0XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIlwiLFwibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLy8gaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7IE1lc2gsIFBsYW5lLCBQcm9ncmFtIH0gZnJvbSAnb2dsJ1xuXG5pbXBvcnQgdmVydGV4IGZyb20gJy4uLy4uL3NoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2wnXG5pbXBvcnQgZnJhZ21lbnQgZnJvbSAnLi4vLi4vc2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IgKHsgY29sbGVjdGlvbnMsIGdsLCBzY2VuZSwgc2l6ZXMsIHVybCB9KSB7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBjb2xsZWN0aW9uc1xuICAgICAgICB0aGlzLmdsID0gZ2xcbiAgICAgICAgdGhpcy51cmwgPSB1cmxcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xuXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbClcbiAgICAgICAgLy8gY29uc29sZS5sb2coJyYmIEdlbyAqKicsIHRoaXMuZ2VvbWV0cnkpXG5cbiAgICAgICAgdGhpcy5leHRyYSA9IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVQcm9ncmFtICh0ZXh0dXJlKSB7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcbiAgICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgICAgdmVydGV4LFxuICAgICAgICAgICAgdW5pZm9ybXM6IHtcbiAgICAgICAgICAgICAgICB1QWxwaGE6IHsgdmFsdWU6IDEgfSxcbiAgICAgICAgICAgICAgICB0TWFwOiB7IHZhbHVlOiB0ZXh0dXJlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjcmVhdGVNZXNoIChtZXNoKSB7XG4gICAgICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2wsIHtcbiAgICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxuICAgICAgICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnggPSBtZXNoLnNjYWxlLnhcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgPSBtZXNoLnNjYWxlLnlcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnogPSBtZXNoLnNjYWxlLnpcblxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9IG1lc2gucG9zaXRpb24ueFxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9IG1lc2gucG9zaXRpb24ueVxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueiA9IG1lc2gucG9zaXRpb24ueiAqIDAuMDFcblxuICAgICAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpXG4gICAgfVxuXG4gICAgc2V0RWxlbWVudCAoZWxlbWVudCkge1xuICAgICAgICBjb25zb2xlLmxvZygnZWxlbWVudCoqKicsIGVsZW1lbnQpXG4gICAgICAgIGlmIChlbGVtZW50LmlkID09PSAnY29sbGVjdGlvbnMnKSB7XG4gICAgICAgICAgICBjb25zdCB7IGluZGV4LCBtZWRpYXMgfSA9IGVsZW1lbnRcbiAgICAgICAgICAgIGNvbnN0IG1lZGlhID0gbWVkaWFzW2luZGV4XVxuXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByb2dyYW0obWVkaWEudGV4dHVyZSlcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTWVzaChtZWRpYS5tZXNoKVxuXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb24gPSAnZGV0YWlsJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVQcm9ncmFtKGVsZW1lbnQudGV4dHVyZSlcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTWVzaChlbGVtZW50KVxuXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb24gPSAnY29sbGVjdGlvbnMnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAgICAgICAgICBBbmltYXRpb25cbiAgICBhbmltYXRlIChtZXNoLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zXG4gICAgfVxufVxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiYjAwZjE5MjNlN2I3ZmIyNzY3NTRcIikiXSwibmFtZXMiOlsiY3NzUmVsb2FkIiwibW9kdWxlIiwiaWQiLCJob3QiLCJkaXNwb3NlIiwiYWNjZXB0IiwidW5kZWZpbmVkIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9ucyIsImdsIiwic2NlbmUiLCJzaXplcyIsInVybCIsInRoaXMiLCJnZW9tZXRyeSIsIlBsYW5lIiwiZXh0cmEiLCJ4IiwieSIsImNyZWF0ZVByb2dyYW0iLCJ0ZXh0dXJlIiwicHJvZ3JhbSIsIlByb2dyYW0iLCJmcmFnbWVudCIsInZlcnRleCIsInVuaWZvcm1zIiwidUFscGhhIiwidmFsdWUiLCJ0TWFwIiwiY3JlYXRlTWVzaCIsIm1lc2giLCJNZXNoIiwic2NhbGUiLCJ6IiwicG9zaXRpb24iLCJzZXRQYXJlbnQiLCJzZXRFbGVtZW50IiwiZWxlbWVudCIsImNvbnNvbGUiLCJsb2ciLCJpbmRleCIsIm1lZGlhcyIsIm1lZGlhIiwidHJhbnNpdGlvbiIsImFuaW1hdGUiLCJjYWxsYmFjayIsImNvbnMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=