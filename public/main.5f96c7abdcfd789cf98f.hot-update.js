/*! For license information please see main.5f96c7abdcfd789cf98f.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateprada("main",{"./styles/index.scss":(e,s,t)=>{t.r(s);var i=t("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)},"./app/components/Canvas/transition.js":(e,s,t)=>{t.r(s),t.d(s,{default:()=>n});var i=t("./node_modules/ogl/src/extras/Plane.js"),o=t("./node_modules/ogl/src/core/Program.js"),a=t("./node_modules/ogl/src/core/Mesh.js"),l=t("./app/shaders/plane-vertex.glsl"),r=t("./app/shaders/plane-fragment.glsl");const n=class{constructor({collections:e,gl:s,scene:t,sizes:o,url:a}){this.collections=e,this.gl=s,this.url=a,this.scene=t,this.sizes=o,this.geometry=new i.Plane(this.gl),this.extra={x:0,y:0}}createProgram(e){this.program=new o.Program(this.gl,{fragment:r.default,vertex:l.default,uniforms:{uAlpha:{value:1},tMap:{value:e}}})}createMesh(e){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.position.z=.01*e.position.z,this.mesh.setParent(this.scene)}setElement(e){if(console.log("element***",e),"collections"===e.id){const{index:s,medias:t}=e,i=t[s];this.createProgram(i.texture),this.createMesh(i.mesh),this.transition="detail"}else this.createProgram(e.texture),this.createMesh(e),this.transition="collections"}animate(){console.log("animate")}}}},(function(e){e.h=()=>"2e530c10b1ce3a222587"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi41Zjk2YzdhYmRjZmQ3ODljZjk4Zi5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7dUZBSU0sSUFBSUEsRUFBWSxFQUFRLDBFQUFSLENBQW9GQyxFQUFPQyxHQUFJLENBQUMsV0FBYSxHQUFHLFFBQVMsSUFDeklELEVBQU9FLElBQUlDLFFBQVFKLEdBQ25CQyxFQUFPRSxJQUFJRSxZQUFPQyxFQUFXTiwrU0NBbkMsY0FDSU8sV0FBQUEsRUFBWSxZQUFFQyxFQUFXLEdBQUVDLEVBQUUsTUFBRUMsRUFBSyxNQUFFQyxFQUFLLElBQUVDLElBQ3pDQyxLQUFLTCxZQUFjQSxFQUNuQkssS0FBS0osR0FBS0EsRUFDVkksS0FBS0QsSUFBTUEsRUFDWEMsS0FBS0gsTUFBUUEsRUFDYkcsS0FBS0YsTUFBUUEsRUFFYkUsS0FBS0MsU0FBVyxJQUFJQyxFQUFBQSxNQUFNRixLQUFLSixJQUcvQkksS0FBS0csTUFBUSxDQUNUQyxFQUFHLEVBQ0hDLEVBQUcsRUFFWCxDQUVBQyxhQUFBQSxDQUFjQyxHQUNWUCxLQUFLUSxRQUFVLElBQUlDLEVBQUFBLFFBQVFULEtBQUtKLEdBQUksQ0FDaENjLFNBQVEsVUFDUkMsT0FBTSxVQUNOQyxTQUFVLENBQ05DLE9BQVEsQ0FBRUMsTUFBTyxHQUNqQkMsS0FBTSxDQUFFRCxNQUFPUCxLQUczQixDQUVBUyxVQUFBQSxDQUFXQyxHQUNQakIsS0FBS2lCLEtBQU8sSUFBSUMsRUFBQUEsS0FBS2xCLEtBQUtKLEdBQUksQ0FDMUJLLFNBQVVELEtBQUtDLFNBQ2ZPLFFBQVNSLEtBQUtRLFVBR2xCUixLQUFLaUIsS0FBS0UsTUFBTWYsRUFBSWEsRUFBS0UsTUFBTWYsRUFDL0JKLEtBQUtpQixLQUFLRSxNQUFNZCxFQUFJWSxFQUFLRSxNQUFNZCxFQUMvQkwsS0FBS2lCLEtBQUtFLE1BQU1DLEVBQUlILEVBQUtFLE1BQU1DLEVBRS9CcEIsS0FBS2lCLEtBQUtJLFNBQVNqQixFQUFJYSxFQUFLSSxTQUFTakIsRUFDckNKLEtBQUtpQixLQUFLSSxTQUFTaEIsRUFBSVksRUFBS0ksU0FBU2hCLEVBQ3JDTCxLQUFLaUIsS0FBS0ksU0FBU0QsRUFBc0IsSUFBbEJILEVBQUtJLFNBQVNELEVBRXJDcEIsS0FBS2lCLEtBQUtLLFVBQVV0QixLQUFLSCxNQUM3QixDQUVBMEIsVUFBQUEsQ0FBV0MsR0FFUCxHQURBQyxRQUFRQyxJQUFJLGFBQWNGLEdBQ1AsZ0JBQWZBLEVBQVFuQyxHQUFzQixDQUM5QixNQUFNLE1BQUVzQyxFQUFLLE9BQUVDLEdBQVdKLEVBQ3BCSyxFQUFRRCxFQUFPRCxHQUVyQjNCLEtBQUtNLGNBQWN1QixFQUFNdEIsU0FDekJQLEtBQUtnQixXQUFXYSxFQUFNWixNQUV0QmpCLEtBQUs4QixXQUFhLFFBQ3RCLE1BQ0k5QixLQUFLTSxjQUFja0IsRUFBUWpCLFNBQzNCUCxLQUFLZ0IsV0FBV1EsR0FFaEJ4QixLQUFLOEIsV0FBYSxhQUUxQixDQUdBQyxPQUFBQSxHQUNJTixRQUFRQyxJQUFJLFVBQ2hCLGtCQ3hFSk0sRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWRhLy4vc3R5bGVzL2luZGV4LnNjc3M/ZjBmZiIsIndlYnBhY2s6Ly9wcmFkYS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL3ByYWRhL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzIzNzA4MzAzMjY2XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIlwiLFwibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLy8gaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcbmltcG9ydCB7IE1lc2gsIFBsYW5lLCBQcm9ncmFtIH0gZnJvbSAnb2dsJ1xuXG5pbXBvcnQgdmVydGV4IGZyb20gJy4uLy4uL3NoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2wnXG5pbXBvcnQgZnJhZ21lbnQgZnJvbSAnLi4vLi4vc2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoeyBjb2xsZWN0aW9ucywgZ2wsIHNjZW5lLCBzaXplcywgdXJsIH0pIHtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAgIHRoaXMuZ2wgPSBnbFxuICAgICAgICB0aGlzLnVybCA9IHVybFxuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmVcbiAgICAgICAgdGhpcy5zaXplcyA9IHNpemVzXG5cbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsKVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnJiYgR2VvICoqJywgdGhpcy5nZW9tZXRyeSlcblxuICAgICAgICB0aGlzLmV4dHJhID0ge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVByb2dyYW0odGV4dHVyZSkge1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG4gICAgICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgICAgIHZlcnRleCxcbiAgICAgICAgICAgIHVuaWZvcm1zOiB7XG4gICAgICAgICAgICAgICAgdUFscGhhOiB7IHZhbHVlOiAxIH0sXG4gICAgICAgICAgICAgICAgdE1hcDogeyB2YWx1ZTogdGV4dHVyZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY3JlYXRlTWVzaChtZXNoKSB7XG4gICAgICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZ2wsIHtcbiAgICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxuICAgICAgICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnggPSBtZXNoLnNjYWxlLnhcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgPSBtZXNoLnNjYWxlLnlcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnogPSBtZXNoLnNjYWxlLnpcblxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueCA9IG1lc2gucG9zaXRpb24ueFxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9IG1lc2gucG9zaXRpb24ueVxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueiA9IG1lc2gucG9zaXRpb24ueiAqIDAuMDFcblxuICAgICAgICB0aGlzLm1lc2guc2V0UGFyZW50KHRoaXMuc2NlbmUpXG4gICAgfVxuXG4gICAgc2V0RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlbGVtZW50KioqJywgZWxlbWVudClcbiAgICAgICAgaWYgKGVsZW1lbnQuaWQgPT09ICdjb2xsZWN0aW9ucycpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5kZXgsIG1lZGlhcyB9ID0gZWxlbWVudFxuICAgICAgICAgICAgY29uc3QgbWVkaWEgPSBtZWRpYXNbaW5kZXhdXG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJvZ3JhbShtZWRpYS50ZXh0dXJlKVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVNZXNoKG1lZGlhLm1lc2gpXG5cbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbiA9ICdkZXRhaWwnXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByb2dyYW0oZWxlbWVudC50ZXh0dXJlKVxuICAgICAgICAgICAgdGhpcy5jcmVhdGVNZXNoKGVsZW1lbnQpXG5cbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbiA9ICdjb2xsZWN0aW9ucydcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vICAgICAgICAgIEFuaW1hdGlvblxuICAgIGFuaW1hdGUoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhbmltYXRlJylcbiAgICB9XG59XG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIyZTUzMGMxMGIxY2UzYTIyMjU4N1wiKSJdLCJuYW1lcyI6WyJjc3NSZWxvYWQiLCJtb2R1bGUiLCJpZCIsImhvdCIsImRpc3Bvc2UiLCJhY2NlcHQiLCJ1bmRlZmluZWQiLCJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb25zIiwiZ2wiLCJzY2VuZSIsInNpemVzIiwidXJsIiwidGhpcyIsImdlb21ldHJ5IiwiUGxhbmUiLCJleHRyYSIsIngiLCJ5IiwiY3JlYXRlUHJvZ3JhbSIsInRleHR1cmUiLCJwcm9ncmFtIiwiUHJvZ3JhbSIsImZyYWdtZW50IiwidmVydGV4IiwidW5pZm9ybXMiLCJ1QWxwaGEiLCJ2YWx1ZSIsInRNYXAiLCJjcmVhdGVNZXNoIiwibWVzaCIsIk1lc2giLCJzY2FsZSIsInoiLCJwb3NpdGlvbiIsInNldFBhcmVudCIsInNldEVsZW1lbnQiLCJlbGVtZW50IiwiY29uc29sZSIsImxvZyIsImluZGV4IiwibWVkaWFzIiwibWVkaWEiLCJ0cmFuc2l0aW9uIiwiYW5pbWF0ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==