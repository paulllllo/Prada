/*! For license information please see main.a3da67c04d8cb8cbb46e.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateprada("main",{"./styles/index.scss":(t,s,e)=>{e.r(s);var i=e("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(t.id,{publicPath:"",locals:!1});t.hot.dispose(i),t.hot.accept(void 0,i)},"./app/components/Canvas/About/Media.js":(t,s,e)=>{e.r(s),e.d(s,{default:()=>n});var i=e("./node_modules/ogl/src/core/Program.js"),h=e("./node_modules/ogl/src/core/Mesh.js"),a=e("./node_modules/gsap/index.js"),o=e("./app/shaders/plane-vertex.glsl"),d=e("./app/shaders/plane-fragment.glsl");const n=class{constructor({element:t,geometry:s,gl:e,scene:i,index:h,sizes:a}){this.element=t,this.gl=e,this.geometry=s,this.index=h,this.scene=i,this.sizes=a,this.extra=0,this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector("img");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:d.default,vertex:o.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new h.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds(t){this.sizes=t.sizes,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,s){this.extra=0,this.createBounds(t),this.updateX(s),this.updateY(0)}updateRotation(){this.mesh.rotation.z=a.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.12*Math.PI,.12*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=50*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-50}update(t){this.bounds&&(this.updateRotation(),this.updateX(t),this.updateY(0))}}}},(function(t){t.h=()=>"24f565d42d9a3369bd9f"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,