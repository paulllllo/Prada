/*! For license information please see main.db82d41a22ebc6c990ff.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateprada("main",{"./styles/index.scss":(e,t,s)=>{s.r(t);var i=s("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)},"./app/components/Canvas/About/Gallery.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var i=s("./node_modules/lodash/lodash.js"),o=s("./node_modules/gsap/index.js"),h=s("./node_modules/ogl/src/core/Transform.js"),n=s("./app/components/Canvas/About/Media.js");class l{constructor({element:e,geometry:t,index:s,gl:i,scene:o,sizes:n}){this.elementWrapper=document.querySelector(".about_gallery_wrapper"),this.element=e,this.geometry=t,this.index=s,this.gl=i,this.scene=o,this.sizes=n,this.group=new h.Transform,this.createMedias(),this.scroll={current:0,target:0,start:0,velocity:.5,lerp:.1},this.group.setParent(this.scene)}createMedias(){this.mediasElements=document.querySelectorAll(".about_gallery_media"),this.medias=(0,i.map)(this.mediasElements,((e,t)=>new n.default({element:e,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes,index:t})))}show(){(0,i.map)(this.medias,(e=>{e.show()}))}hide(){(0,i.map)(this.medias,(e=>{e.hide()}))}onResize(e){this.bounds=this.elementWrapper.getBoundingClientRect(),this.sizes=e.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,(0,i.map)(this.medias,(t=>t.onResize(e,this.scroll.current)))}onTouchDown({x:e,y:t}){this.scroll.start=this.scroll.current}onTouchMove({x:e,y:t}){const s=e.start-e.end;this.scroll.target=this.scroll.start-s}onTouchUp({x:e,y:t}){}update(e){if(!this.bounds)return;const t=.1*(e.current-e.target),s=e.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=t,this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),(0,i.map)(this.medias,((e,t)=>{const s=e.mesh.scale.x/2;if("left"===this.direction){e.mesh.position.x+s<-this.sizes.width/2&&(e.extra+=this.width)}else if("right"===this.direction){e.mesh.position.x-s>this.sizes.width/2&&(e.extra-=this.width)}e.update(this.scroll.current)}));const h=s*this.sizes.height;this.group.position.y=h}}},"./app/components/Canvas/About/Media.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/ogl/src/core/Program.js"),o=s("./node_modules/ogl/src/core/Mesh.js"),h=s("./node_modules/gsap/index.js"),n=s("./app/shaders/plane-vertex.glsl"),l=s("./app/shaders/plane-fragment.glsl");const a=class{constructor({element:e,geometry:t,gl:s,scene:i,index:o,sizes:h}){this.element=e,this.gl=s,this.geometry=t,this.index=o,this.scene=i,this.sizes=h,this.extra=0,this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element.querySelector("img");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:l.default,vertex:n.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new o.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds(e){this.sizes=e.sizes,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){h.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){h.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra=0,this.createBounds(e),this.updateX(t),this.updateY(0)}updateRotation(){this.mesh.rotation.z=h.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.12*Math.PI,.12*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=50*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-50}update(e){this.bounds&&(this.updateRotation(),this.updateX(e),this.updateY(0))}}},"./app/components/Canvas/About/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),o=s("./node_modules/ogl/src/extras/Plane.js"),h=s("./app/components/Canvas/About/Gallery.js"),n=s("./node_modules/lodash/lodash.js");class l{constructor({gl:e,scene:t,sizes:s}){this.gl=e,this.scene=t,this.sizes=s,this.group=new i.Transform,this.createGeometry(),this.createGalleries(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new o.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about_gallery"),this.galleries=(0,n.map)(this.galleriesElements,((e,t)=>new h.default({element:e,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes,index:t})))}show(){(0,n.map)(this.galleries,(e=>{e.show()}))}hide(){(0,n.map)(this.galleries,(e=>{e.hide()}))}onResize(e){(0,n.map)(this.galleries,(t=>t.onResize(e)))}onTouchDown(e){(0,n.map)(this.galleries,(t=>t.onTouchDown(e)))}onTouchMove(e){(0,n.map)(this.galleries,(t=>t.onTouchMove(e)))}onTouchUp(e){(0,n.map)(this.galleries,(t=>t.onTouchUp(e)))}onWheel({pixelX:e,pixelY:t}){}update(e){(0,n.map)(this.galleries,(t=>{t.update(e)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>d});var i=s("./node_modules/ogl/src/core/Renderer.js"),o=s("./node_modules/ogl/src/core/Camera.js"),h=s("./node_modules/ogl/src/core/Transform.js"),n=s("./app/components/Canvas/Home/index.js"),l=s("./app/components/Canvas/About/index.js"),a=s("./app/components/Canvas/Collections/index.js"),c=s("./app/components/Canvas/transition.js"),r=s("./app/components/Canvas/Detail/index.js");class d{constructor({template:e}){this.template=e,this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0}}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antiAliasing:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new o.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new h.Transform}createHome(){this.home=new n.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null,console.log("destroy home!"))}createAbout(){this.about=new l.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null,console.log("destroy about!"))}createCollections(){this.collections=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createDetail(){this.detail=new r.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onPageChangeEnd(this.template)}onPageChangeStart(e,t){this.collections&&this.collections.hide(),this.about&&this.about.hide(),this.home&&this.home.hide(),this.detail&&this.detail.hide(),this.fromCollectionsToDetail="collections"===this.template&&t.indexOf("detail")>-1,this.fromDetailToCollections="detail"===this.template&&t.indexOf("collections")>-1,(this.fromCollectionsToDetail||this.fromDetailToCollections)&&(this.transition=new c.default({collections:this.collections,url:t,gl:this.gl,scene:this.scene,sizes:this.sizes}),this.transition.setElement(this.collections||this.detail))}onPageChangeEnd(e){"collections"===e?this.createCollections():this.collections&&this.destroyCollections(),"Detail"===e?this.createDetail():this.detail&&this.destroyDetail(),"about"===e?this.createAbout():this.about&&this.destroyAbout(),"home"===e?this.createHome():this.home&&this.destroyHome()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,s=t*this.camera.aspect;this.sizes={height:t,width:s};const i={sizes:this.sizes};this.collections&&this.collections.onResize(i),this.detail&&this.detail.onResize(i),this.about&&this.about.onResize(i),this.home&&this.home.onResize(i)}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY;const t={x:this.x,y:this.y};this.collections&&this.collections.onTouchDown&&this.collections.onTouchDown(t),this.detail&&this.detail.onTouchDown&&this.detail.onTouchDown(t),this.about&&this.about.onTouchDown&&this.about.onTouchDown(t),this.home&&this.home.onTouchDown&&this.home.onTouchDown(t)}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,s=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=s;const i={x:this.x,y:this.y};this.collections&&this.collections.onTouchMove&&this.collections.onTouchMove(i),this.detail&&this.detail.onTouchMove&&this.detail.onTouchMove(i),this.about&&this.about.onTouchMove&&this.about.onTouchMove(i),this.home&&this.home.onTouchMove&&this.home.onTouchMove(i)}onTouchUp(e){this.isDown=!1;const t=e.touches?e.touches[0].clientX:e.clientX,s=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=s;const i={x:this.x,y:this.y};this.collections&&this.collections.onTouchUp&&this.collections.onTouchUp(i),this.detail&&this.detail.onTouchUp&&this.detail.onTouchUp(i),this.about&&this.about.onTouchUp&&this.about.onTouchUp(i),this.home&&this.home.onTouchUp&&this.home.onTouchUp(i)}onWheel(e){this.collections&&this.collections.onWheel(e),this.home&&this.home.onWheel(e)}update(e){this.collections&&this.collections.update(e),this.detail&&this.detail.update(e),this.about&&this.about.update(e),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}}},(function(e){e.h=()=>"a3da67c04d8cb8cbb46e"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,