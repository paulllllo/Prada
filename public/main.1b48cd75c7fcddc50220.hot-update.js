/*! For license information please see main.1b48cd75c7fcddc50220.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateprada("main",{"./styles/index.scss":(t,e,s)=>{s.r(e);var i=s("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(t.id,{publicPath:"",locals:!1});t.hot.dispose(i),t.hot.accept(void 0,i)},"./app/shaders/collections-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture;\n    gl_FragColor.a = (1.0 - abs(vPosition.x / 0.5)) * uAlpha;\n}\n"},"./app/shaders/collections-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec2 uv;\n\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    vPosition = newPosition;\n\n    gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/home-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/home-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec2 uv;\n\nattribute vec3 position;\n\nuniform float uSpeed;\nuniform vec4 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    newPosition.z -= (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) + sin(newPosition.x / uViewportSizes.x * PI + PI / 2.0)) * abs(uSpeed);\n\n    gl_Position = projectionMatrix * newPosition;\n}"},"./app/shaders/plane-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec2 uv;\n\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},"./app/components/Canvas/About/Gallery.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>h});var i=s("./node_modules/lodash/lodash.js"),r=s("./node_modules/gsap/index.js"),n=s("./node_modules/ogl/src/core/Transform.js"),a=s("./app/components/Canvas/About/Media.js");class h{constructor({element:t,geometry:e,index:s,gl:i,scene:r,sizes:a}){this.elementWrapper=document.querySelector(".about_gallery_wrapper"),this.element=t,this.geometry=e,this.index=s,this.gl=i,this.scene=r,this.sizes=a,this.scroll={current:0,target:0,start:0,velocity:.5,lerp:.1},this.group=new n.Transform,this.createMedias(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene)}createMedias(){this.mediasElements=document.querySelectorAll(".about_gallery_media"),this.medias=(0,i.map)(this.mediasElements,((t,e)=>new a.default({element:t,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes,index:e})))}show(){(0,i.map)(this.medias,(t=>{t.show()}))}hide(){(0,i.map)(this.medias,(t=>{t.hide()}))}onResize(t){this.bounds=this.elementWrapper.getBoundingClientRect(),this.sizes=t.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,(0,i.map)(this.medias,(e=>e.onResize(t,this.scroll.current)))}onTouchDown({x:t,y:e}){this.scroll.start=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.start-s}onTouchUp({x:t,y:e}){}update(t){const e=.1*(t.current-t.target),s=t.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=e,this.scroll.current=r.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),(0,i.map)(this.medias,((t,e)=>{const s=t.mesh.scale.x/2;if("left"===this.direction){t.mesh.position.x+s<-this.sizes.width/2&&(t.extra+=this.width)}else if("right"===this.direction){t.mesh.position.x-s>this.sizes.width/2&&(t.extra-=this.width)}t.update(this.scroll.current)}));const n=s*this.sizes.height;this.group.position.y=n}}},"./app/components/Canvas/About/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./node_modules/gsap/index.js"),a=s("./app/shaders/plane-vertex.glsl"),h=s("./app/shaders/plane-fragment.glsl");const o=class{constructor({element:t,geometry:e,gl:s,scene:i,index:r,sizes:n}){this.element=t,this.gl=s,this.geometry=e,this.index=r,this.scene=i,this.sizes=n,this.extra=0,this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector("img");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:h.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds(t){this.sizes=t.sizes,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){n.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){n.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra=0,this.createBounds(t),this.updateX(e),this.updateY(0)}updateRotation(){this.mesh.rotation.z=n.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.12*Math.PI,.12*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=50*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-50}update(t){this.updateRotation(),this.updateX(t),this.updateY(0)}}},"./app/components/Canvas/About/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>h});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./app/components/Canvas/About/Gallery.js"),a=s("./node_modules/lodash/lodash.js");class h{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.scene=e,this.sizes=s,this.group=new i.Transform,this.createGeometry(),this.createGalleries(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about_gallery"),this.galleries=(0,a.map)(this.galleriesElements,((t,e)=>new n.default({element:t,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes,index:e})))}show(){(0,a.map)(this.galleries,(t=>{t.show()}))}hide(){(0,a.map)(this.galleries,(t=>{t.hide()}))}onResize(t){(0,a.map)(this.galleries,(e=>e.onResize(t)))}onTouchDown(t){(0,a.map)(this.galleries,(e=>e.onTouchDown(t)))}onTouchMove(t){(0,a.map)(this.galleries,(e=>e.onTouchMove(t)))}onTouchUp(t){(0,a.map)(this.galleries,(e=>e.onTouchUp(t)))}onWheel({pixelX:t,pixelY:e}){}update(t){(0,a.map)(this.galleries,(e=>{e.update(t)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Collections/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/core/Program.js"),n=s("./node_modules/ogl/src/core/Mesh.js"),a=s("./app/shaders/plane-vertex.glsl"),h=s("./app/shaders/plane-fragment.glsl");const o=class{constructor({element:t,geometry:e,gl:s,scene:i,index:r,sizes:n}){this.element=t,this.gl=s,this.geometry=e,this.index=r,this.scene=i,this.sizes=n,this.extra={x:0,y:0},this.opacity={current:0,target:0,lerp:.1,multiplier:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector(".collections_gallery_media_image");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new r.Program(this.gl,{fragment:h.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){i.default.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){i.default.to(this.opacity,{multiplier:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e||0)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){this.updateX(t),this.updateY(),this.opacity.target=this.index===e?1:.4,this.opacity.current=i.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.program.uniforms.uAlpha.value=this.opacity.current*this.opacity.multiplier}}},"./app/components/Canvas/Collections/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./app/components/Canvas/Collections/Media.js"),a=s("./node_modules/lodash/lodash.js"),h=s("./node_modules/gsap/index.js"),o=s("./node_modules/prefix/index.js");class l{constructor({gl:t,scene:e,sizes:s,transition:r}){this.id="collections",this.gl=t,this.scene=e,this.sizes=s,this.transition=r,this.group=new i.Transform,this.transformPrefix=o("transform"),this.mediaElements=document.querySelectorAll(".collections_gallery_media"),this.collectionArticles=document.querySelectorAll(".collections_article"),this.galleryElement=document.querySelector(".collections_gallery"),this.galleryWrapperElement=document.querySelector(".collections_gallery_wrapper"),this.titlesElement=document.querySelector(".collections_titles"),this.activeFocusClass="collections_article--active",this.scroll={current:0,target:0,start:0,velocity:.5,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGallery(){this.medias=(0,a.map)(this.mediaElements,((t,e)=>new n.default({element:t,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes,index:e})))}show(){(0,a.map)(this.medias,(t=>{t.show()})),this.transition&&this.transition.animate(this.medias[0].mesh,(t=>{}))}hide(){(0,a.map)(this.medias,(t=>{t.hide()}))}onResize(t){this.scroll.current=0,this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.sizes=t.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.start=this.scroll.target=0,(0,a.map)(this.medias,(e=>e.onResize(t,this.scroll.current))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:t,y:e}){this.scroll.start=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.start-s}onTouchUp({x:t,y:e}){}onWheel({pixelY:t}){this.scroll.target+=t}onChangeFocus(t){this.index=t;const e=parseInt(this.mediaElements[this.index].getAttribute("data-index"));(0,a.map)(this.collectionArticles,((t,s)=>{s===e?t.classList.add(this.activeFocusClass):t.classList.remove(this.activeFocusClass)})),this.titlesElement.style[this.transformPrefix]=`translateY(${70*e}%) translate(-50%, -50%) rotate(-90deg)`}update(){this.scroll.target=h.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=h.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.start<this.scroll.current?this.direction="right":this.scroll.start>this.scroll.current&&(this.direction="left"),this.scroll.start=this.scroll.current;const t=Math.floor(Math.abs(this.scroll.current/this.scroll.limit)*this.medias.length);this.index!==t&&this.onChangeFocus(t),(0,a.map)(this.medias,((t,e)=>{t.update(this.scroll.current,this.index)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Detail/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>l});var i=s("./node_modules/ogl/src/extras/Plane.js"),r=s("./node_modules/ogl/src/core/Program.js"),n=s("./node_modules/ogl/src/core/Mesh.js"),a=s("./node_modules/gsap/index.js"),h=s("./app/shaders/collections-vertex.glsl"),o=s("./app/shaders/collections-fragment.glsl");const l=class{constructor({gl:t,scene:e,sizes:s,transition:r}){this.id="detail",this.element=document.querySelector(".detail_media_image"),this.gl=t,this.scene=e,this.sizes=s,this.transition=r,this.geometry=new i.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes}),this.onResize(this.sizes),this.show()}createTexture(){const t=this.element.getAttribute("data-src");this.texture=window.TEXTURES[t]}createProgram(){this.program=new r.Program(this.gl,{fragment:o.default,vertex:h.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){this.transition?this.transition.animate(this.mesh,(t=>{this.program.uniforms.uAlpha.value=1})):a.default.to(this.program.uniforms.uAlpha,{value:1})}hide(){}onResize(t){this.createBounds(t),this.updateX(),this.updateY()}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(){this.x=this.bounds.left/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width}updateY(){this.y=this.bounds.top/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height}update(){this.bounds&&(this.updateX(),this.updateY())}destroy(){this.mesh.setParent(null)}}},"./app/components/Canvas/Home/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/core/Program.js"),n=s("./node_modules/ogl/src/core/Mesh.js"),a=s("./app/shaders/home-vertex.glsl"),h=s("./app/shaders/home-fragment.glsl");const o=class{constructor({element:t,geometry:e,gl:s,scene:i,index:r,sizes:n}){this.element=t,this.gl=s,this.geometry=e,this.index=r,this.scene=i,this.sizes=n,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element;this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new r.Program(this.gl,{fragment:h.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},uSpeed:{value:0}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){i.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){i.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e.x?e.x:0),this.updateY(e.y?e.y:0)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){this.updateX(t.x),this.updateY(t.y),this.program.uniforms.uSpeed.value=e}}},"./app/components/Canvas/Home/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./app/components/Canvas/Home/Media.js"),a=s("./node_modules/lodash/lodash.js"),h=s("./node_modules/gsap/index.js");class o{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.scene=e,this.sizes=s,this.group=new i.Transform,this.mediaElements=document.querySelectorAll(".home_gallery_media_image"),this.galleryElement=document.querySelector(".home_gallery"),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scroll={x:0,y:0},this.scrollCurrent={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGallery(){this.medias=(0,a.map)(this.mediaElements,((t,e)=>new n.default({element:t,geometry:this.geometry,gl:this.gl,scene:this.group,sizes:this.sizes,index:e})))}show(){(0,a.map)(this.medias,(t=>{t.show()}))}hide(){(0,a.map)(this.medias,(t=>{t.hide()}))}onResize(t){this.scroll={x:0,y:0},this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={width:this.galleryWidth=this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryHeight=this.galleryBounds.height/window.innerHeight*this.sizes.height},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,(0,a.map)(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y,this.speed.target=1}onTouchMove({x:t,y:e}){const s=t.start-t.end,i=e.start-e.end;this.x.target=this.scrollCurrent.x-s,this.y.target=this.scrollCurrent.y-i}onTouchUp({x:t,y:e}){this.speed.target=0}onWheel({pixelX:t,pixelY:e}){this.x.target+=t,this.y.target+=e}update(){this.galleryBounds&&(this.speed.current=h.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=h.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=h.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="up":this.scroll.y>this.y.current&&(this.y.direction="down"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,(0,a.map)(this.medias,((t,e)=>{const s=t.mesh.scale.x/2;if("left"===this.x.direction){t.mesh.position.x+s<-this.sizes.width/2&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=h.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-s>this.sizes.width/2&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=h.default.utils.random(.03*-Math.PI,.03*Math.PI))}const i=t.mesh.scale.y/2;if("up"===this.y.direction){t.mesh.position.y+i<-this.sizes.height/2&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=h.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("down"===this.y.direction){t.mesh.position.y-i>this.sizes.height/2&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=h.default.utils.random(.03*-Math.PI,.03*Math.PI))}t.update(this.scroll,this.speed.current)})))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>u});var i=s("./node_modules/ogl/src/core/Renderer.js"),r=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/core/Transform.js"),a=s("./app/components/Canvas/Home/index.js"),h=s("./app/components/Canvas/About/index.js"),o=s("./app/components/Canvas/Collections/index.js"),l=s("./app/components/Canvas/transition.js"),c=s("./app/components/Canvas/Detail/index.js");class u{constructor({template:t}){this.template=t,this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0}}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antiAliasing:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new r.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createHome(){this.home=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null,console.log("destroy home!"))}createAbout(){this.about=new h.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null,console.log("destroy about!"))}createCollections(){this.collections=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createDetail(){this.detail=new c.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onPageChangeEnd(this.template)}onPageChangeStart(t,e){this.collections&&this.collections.hide(),this.about&&this.about.hide(),this.home&&this.home.hide(),this.detail&&this.detail.hide(),this.fromCollectionsToDetail="collections"===this.template&&e.indexOf("detail")>-1,this.fromDetailToCollections="detail"===this.template&&e.indexOf("collections")>-1,(this.fromCollectionsToDetail||this.fromDetailToCollections)&&(console.log("fromCollectionsToDetail",fromCollectionsToDetail),console.log("fromDetailToCollections",fromDetailToCollections),this.transition=new l.default({collections:this.collections,url:e,gl:this.gl,scene:this.scene,sizes:this.sizes}),this.transition.setElement(this.collections||this.detail),console.log("Detail***",this.detail))}onPageChangeEnd(t){"collections"===t?this.createCollections():this.collections&&this.destroyCollections(),"Detail"===t?this.createDetail():this.detail&&this.destroyDetail(),"about"===t?this.createAbout():this.about&&this.destroyAbout(),"home"===t?this.createHome():this.home&&this.destroyHome()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,s=e*this.camera.aspect;this.sizes={height:e,width:s};const i={sizes:this.sizes};this.collections&&this.collections.onResize(i),this.detail&&this.detail.onResize(i),this.about&&this.about.onResize(i),this.home&&this.home.onResize(i)}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY;const e={x:this.x,y:this.y};this.collections&&this.collections.onTouchDown&&this.collections.onTouchDown(e),this.detail&&this.detail.onTouchDown&&this.detail.onTouchDown(e),this.about&&this.about.onTouchDown&&this.about.onTouchDown(e),this.home&&this.home.onTouchDown&&this.home.onTouchDown(e)}onTouchMove(t){if(!this.isDown)return;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const i={x:this.x,y:this.y};this.collections&&this.collections.onTouchMove&&this.collections.onTouchMove(i),this.detail&&this.detail.onTouchMove&&this.detail.onTouchMove(i),this.about&&this.about.onTouchMove&&this.about.onTouchMove(i),this.home&&this.home.onTouchMove&&this.home.onTouchMove(i)}onTouchUp(t){this.isDown=!1;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const i={x:this.x,y:this.y};this.collections&&this.collections.onTouchUp&&this.collections.onTouchUp(i),this.detail&&this.detail.onTouchUp&&this.detail.onTouchUp(i),this.about&&this.about.onTouchUp&&this.about.onTouchUp(i),this.home&&this.home.onTouchUp&&this.home.onTouchUp(i)}onWheel(t){this.collections&&this.collections.onWheel(t),this.home&&this.home.onWheel(t)}update(t){this.collections&&this.collections.update(t),this.detail&&this.detail.update(t),this.about&&this.about.update(t),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Canvas/transition.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>l});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/ogl/src/core/Program.js"),a=s("./node_modules/ogl/src/core/Mesh.js"),h=s("./app/shaders/plane-vertex.glsl"),o=s("./app/shaders/plane-fragment.glsl");const l=class{constructor({collections:t,gl:e,scene:s,sizes:i,url:n}){this.collections=t,this.gl=e,this.url=n,this.scene=s,this.sizes=i,this.geometry=new r.Plane(this.gl),this.extra={x:0,y:0}}createProgram(t){this.program=new n.Program(this.gl,{fragment:o.default,vertex:h.default,uniforms:{uAlpha:{value:1},tMap:{value:t}}})}createMesh(t){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=t.scale.x,this.mesh.scale.y=t.scale.y,this.mesh.scale.z=t.scale.z,this.mesh.position.x=t.position.x,this.mesh.position.y=t.position.y,this.mesh.position.z=.01*t.position.z,this.mesh.setParent(this.scene)}setElement(t){if(console.log("element***",t),"collections"===t.id){const{index:e,medias:s}=t,i=s[e];this.createProgram(i.texture),this.createMesh(i.mesh),this.transition="detail"}else this.createProgram(t.texture),this.createMesh(t),this.transition="collections"}animate(t,e){const s=i.default.timeline({onComplete:e});s.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:t.scale.x,y:t.scale.y,z:t.scale.z},0),s.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",x:t.position.x,y:t.position.y,z:t.position.z},0),s.call((t=>{this.scene.removeChild(this.mesh)}))}}},"./app/index.js":(t,e,s)=>{s.r(e),s.d(e,{app:()=>d});var i=s("./node_modules/lodash/lodash.js"),r=s("./app/pages/About/index.js"),n=s("./app/pages/Collections/index.js"),a=s("./app/pages/Detail/index.js"),h=s("./app/pages/Home/index.js"),o=s("./app/components/Canvas/index.js"),l=s("./app/components/Preloader.js"),c=s("./app/components/Navigation.js"),u=s("./node_modules/normalize-wheel/index.js");const d=new class{constructor(){this.createContent(),this.createNavigation(),this.createCanvas(),this.createPreloader(),this.createPages(),this.addLinkListeners(),this.addEventListeners(),this.update()}createNavigation(){this.navigation=new c.default({template:this.template})}createPreloader(){this.preloader=new l.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new o.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new r.default,collections:new n.default,detail:new a.default,home:new h.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.canvas.onPreloaded(),this.preloader.destroy(),this.onResize(),this.page.show()}onPopstate(){this.onPageChange({url:window.location.pathname,push:!1})}async onPageChange({url:t,push:e=!0}){this.canvas.onPageChangeStart(this.template,t),await this.page.hide();const s=await window.fetch(t);if(200===s.status){const i=await s.text(),r=document.createElement("div");e&&window.history.pushState({},"",t),r.innerHTML=i;const n=r.querySelector(".content");this.template=n.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=n.innerHTML,this.canvas.onPageChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.navigation.onChange(this.template),this.addLinkListeners()}else console.log("Error")}onResize(){window.requestAnimationFrame((t=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()})),this.page&&this.page.onResize&&this.page.onResize()}onTouchDown(t){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(t)}onTouchMove(t){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(t)}onTouchUp(t){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(t)}onWheel(t){const e=u(t);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(e),this.page&&this.page.onWheel&&this.page.onWheel(e)}update(){this.page&&this.page.updateScroll&&this.page.updateScroll(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("wheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("popstate",this.onPopstate.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");(0,i.each)(t,(t=>{t.onclick=e=>{e.preventDefault();const{href:s}=t;this.onPageChange({url:s})}}))}}},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{s.r(e),s.d(e,{Camera:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat4.js"),n=s("./node_modules/ogl/src/math/Vec3.js");const a=new r.Mat4,h=new n.Vec3,o=new n.Vec3;class l extends i.Transform{constructor(t,{near:e=.1,far:s=100,fov:i=45,aspect:a=1,left:h,right:o,bottom:l,top:c,zoom:u=1}={}){super(),Object.assign(this,{near:e,far:s,fov:i,aspect:a,left:h,right:o,bottom:l,top:c,zoom:u}),this.projectionMatrix=new r.Mat4,this.viewMatrix=new r.Mat4,this.projectionViewMatrix=new r.Mat4,this.worldPosition=new n.Vec3,this.type=h||o?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:i=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:i}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:i,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left||-1,right:i=this.right||1,bottom:r=this.bottom||-1,top:n=this.top||1,zoom:a=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:i,bottom:r,top:n,zoom:a}),s/=a,i/=a,r/=a,n/=a,this.projectionMatrix.fromOrthogonal({left:s,right:i,bottom:r,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(a.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t,e=t.worldMatrix){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const s=h;s.copy(t.geometry.bounds.center),s.applyMatrix4(e);const i=t.geometry.bounds.radius*e.getMaxScaleOnAxis();return this.frustumIntersectsSphere(s,i)}frustumIntersectsSphere(t,e){const s=o;for(let i=0;i<6;i++){const r=this.frustum[i];if(s.copy(r).dot(t)+r.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{s.r(e),s.d(e,{Geometry:()=>o});var i=s("./node_modules/ogl/src/math/Vec3.js");const r=new i.Vec3;let n=1,a=1,h=!1;class o{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=a++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const i=this.attributes[e];this.gl.bindBuffer(i.target,i.buffer),this.glState.boundBuffer=i.buffer;let r=1;35674===s&&(r=2),35675===s&&(r=3),35676===s&&(r=4);const n=i.size/r,a=1===r?0:r*r*4,h=1===r?0:4*r;for(let e=0;e<r;e++)this.gl.vertexAttribPointer(t+e,n,i.type,i.normalized,i.stride+a,i.offset+e*h),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,i.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)}));let s=2;this.attributes.index?.type===this.gl.UNSIGNED_INT&&(s=4),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*s,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+this.drawRange.start*s):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:h?void 0:(console.warn("No position buffer data found to compute bounds"),h=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.size;this.bounds||(this.bounds={min:new i.Vec3,max:new i.Vec3,center:new i.Vec3,scale:new i.Vec3,radius:1/0});const r=this.bounds.min,n=this.bounds.max,a=this.bounds.center,h=this.bounds.scale;r.set(1/0),n.set(-1/0);for(let t=0,i=e.length;t<i;t+=s){const s=e[t],i=e[t+1],a=e[t+2];r.x=Math.min(s,r.x),r.y=Math.min(i,r.y),r.z=Math.min(a,r.z),n.x=Math.max(s,n.x),n.y=Math.max(i,n.y),n.z=Math.max(a,n.z)}h.sub(n,r),a.add(r,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.size;this.bounds||this.computeBoundingBox(t);let i=0;for(let t=0,n=e.length;t<n;t+=s)r.fromArray(e,t),i=Math.max(i,this.bounds.center.squaredDistance(r));this.bounds.radius=Math.sqrt(i)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,s)=>{s.r(e),s.d(e,{Mesh:()=>h});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat3.js"),n=s("./node_modules/ogl/src/math/Mat4.js");let a=0;class h extends i.Transform{constructor(t,{geometry:e,program:s,mode:i=t.TRIANGLES,frustumCulled:h=!0,renderOrder:o=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=a++,this.geometry=e,this.program=s,this.mode=i,this.frustumCulled=h,this.renderOrder=o,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix),this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})));let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,s)=>{s.r(e),s.d(e,{Program:()=>n});let i=1;const r={};class n{constructor(t,{vertex:e,fragment:s,uniforms:r={},transparent:n=!1,cullFace:a=t.BACK,frontFace:h=t.CCW,depthTest:o=!0,depthWrite:l=!0,depthFunc:c=t.LEQUAL}={}){t.canvas||console.error("gl not passed as first argument to Program"),this.gl=t,this.uniforms=r,this.id=i++,e||console.warn("vertex shader not supplied"),s||console.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=a,this.frontFace=h,this.depthTest=o,this.depthWrite=l,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA)),this.vertexShader=t.createShader(t.VERTEX_SHADER),this.fragmentShader=t.createShader(t.FRAGMENT_SHADER),this.program=t.createProgram(),t.attachShader(this.program,this.vertexShader),t.attachShader(this.program,this.fragmentShader),this.setShaders({vertex:e,fragment:s})}setShaders({vertex:t,fragment:e}){if(t&&(this.gl.shaderSource(this.vertexShader,t),this.gl.compileShader(this.vertexShader),""!==this.gl.getShaderInfoLog(this.vertexShader)&&console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\nVertex Shader\n${h(t)}`)),e&&(this.gl.shaderSource(this.fragmentShader,e),this.gl.compileShader(this.fragmentShader),""!==this.gl.getShaderInfoLog(this.fragmentShader)&&console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\nFragment Shader\n${h(e)}`)),this.gl.linkProgram(this.program),!this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS))return console.warn(this.gl.getProgramInfoLog(this.program));this.uniformLocations=new Map;let s=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_UNIFORMS);for(let t=0;t<s;t++){let e=this.gl.getActiveUniform(this.program,t);this.uniformLocations.set(e,this.gl.getUniformLocation(this.program,e.name));const s=e.name.match(/(\w+)/g);e.uniformName=s[0],e.nameComponents=s.slice(1)}this.attributeLocations=new Map;const i=[],r=this.gl.getProgramParameter(this.program,this.gl.ACTIVE_ATTRIBUTES);for(let t=0;t<r;t++){const e=this.gl.getActiveAttrib(this.program,t),s=this.gl.getAttribLocation(this.program,e.name);-1!==s&&(i[s]=e.name,this.attributeLocations.set(e,s))}this.attributeOrder=i.join("")}setBlendFunc(t,e,s,i){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=s,this.blendFunc.dstAlpha=i,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,s)=>{let i=this.uniforms[s.uniformName];for(const t of s.nameComponents){if(!i)break;if(!(t in i)){if(Array.isArray(i.value))break;i=void 0;break}i=i[t]}if(!i)return l(`Active uniform ${s.name} has not been supplied`);if(i&&void 0===i.value)return l(`${s.name} uniform is missing a value parameter`);if(i.value.texture)return e+=1,i.value.update(e),a(this.gl,s.type,t,e);if(i.value.length&&i.value[0].texture){const r=[];return i.value.forEach((t=>{e+=1,t.update(e),r.push(e)})),a(this.gl,s.type,t,r)}a(this.gl,s.type,t,i.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(t,e,s,i){i=i.length?function(t){const e=t.length,s=t[0].length;if(void 0===s)return t;const i=e*s;let n=r[i];n||(r[i]=n=new Float32Array(i));for(let i=0;i<e;i++)n.set(t[i],i*s);return n}(i):i;const n=t.renderer.state.uniformLocations.get(s);if(i.length)if(void 0===n||n.length!==i.length)t.renderer.state.uniformLocations.set(s,i.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let s=0,i=t.length;s<i;s++)if(t[s]!==e[s])return!1;return!0}(n,i))return;n.set?n.set(i):function(t,e){for(let s=0,i=t.length;s<i;s++)t[s]=e[s]}(n,i),t.renderer.state.uniformLocations.set(s,n)}else{if(n===i)return;t.renderer.state.uniformLocations.set(s,i)}switch(e){case 5126:return i.length?t.uniform1fv(s,i):t.uniform1f(s,i);case 35664:return t.uniform2fv(s,i);case 35665:return t.uniform3fv(s,i);case 35666:return t.uniform4fv(s,i);case 35670:case 5124:case 35678:case 36306:case 35680:return i.length?t.uniform1iv(s,i):t.uniform1i(s,i);case 35671:case 35667:return t.uniform2iv(s,i);case 35672:case 35668:return t.uniform3iv(s,i);case 35673:case 35669:return t.uniform4iv(s,i);case 35674:return t.uniformMatrix2fv(s,!1,i);case 35675:return t.uniformMatrix3fv(s,!1,i);case 35676:return t.uniformMatrix4fv(s,!1,i)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let o=0;function l(t){o>100||(console.warn(t),o++,o>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{s.r(e),s.d(e,{Renderer:()=>n});const i=new(s("./node_modules/ogl/src/math/Vec3.js").Vec3);let r=1;class n{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:i=1,alpha:n=!1,depth:a=!0,stencil:h=!1,antialias:o=!1,premultipliedAlpha:l=!1,preserveDrawingBuffer:c=!1,powerPreference:u="default",autoClear:d=!0,webgl:g=2}={}){const m={alpha:n,depth:a,stencil:h,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:u};this.dpr=i,this.alpha=n,this.color=!0,this.depth=a,this.stencil=h,this.premultipliedAlpha=l,this.autoClear=d,this.id=r++,2===g&&(this.gl=t.getContext("webgl2",m)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",m)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=!1,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LEQUAL,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,this.gl.canvas.style&&Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,i=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=i,this.gl.viewport(s,i,t,e))}setScissor(t,e,s=0,i=0){this.gl.scissor(s,i,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,i){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===i||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=i,void 0!==s?this.gl.blendFuncSeparate(t,e,s,i):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:r}){let n=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||n.push(t))})),r){const t=[],s=[],r=[];n.forEach((n=>{n.program.transparent?n.program.depthTest?s.push(n):r.push(n):t.push(n),n.zDepth=0,0===n.renderOrder&&n.program.depthTest&&e&&(n.worldMatrix.getTranslation(i),i.applyMatrix4(e.projectionViewMatrix),n.zDepth=i.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),r.sort(this.sortUI),n=t.concat(s,r)}return n}render({scene:t,camera:e,target:s=null,update:i=!0,sort:r=!0,frustumCull:n=!0,clear:a}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),i&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:r}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{s.r(e),s.d(e,{Transform:()=>h});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/ogl/src/math/Quat.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),a=s("./node_modules/ogl/src/math/Euler.js");class h{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.worldMatrixNeedsUpdate=!1,this.position=new i.Vec3,this.quaternion=new r.Quat,this.scale=new i.Vec3(1),this.rotation=new a.Euler,this.up=new i.Vec3(0,1,0),this.rotation._target.onChange=()=>this.quaternion.fromEuler(this.rotation,!0),this.quaternion._target.onChange=()=>this.rotation.fromQuaternion(this.quaternion,void 0,!0)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.decompose(this.quaternion._target,this.position,this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion._target),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{s.r(e),s.d(e,{Plane:()=>r});var i=s("./node_modules/ogl/src/core/Geometry.js");class r extends i.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:i=1,heightSegments:n=1,attributes:a={}}={}){const h=i,o=n,l=(h+1)*(o+1),c=h*o*6,u=new Float32Array(3*l),d=new Float32Array(3*l),g=new Float32Array(2*l),m=c>65536?new Uint32Array(c):new Uint16Array(c);r.buildPlane(u,d,g,m,e,s,0,h,o),Object.assign(a,{position:{size:3,data:u},normal:{size:3,data:d},uv:{size:2,data:g},index:{data:m}}),super(t,a)}static buildPlane(t,e,s,i,r,n,a,h,o,l=0,c=1,u=2,d=1,g=-1,m=0,p=0){const f=m,x=r/h,w=n/o;for(let y=0;y<=o;y++){let v=y*w-n/2;for(let n=0;n<=h;n++,m++){let w=n*x-r/2;if(t[3*m+l]=w*d,t[3*m+c]=v*g,t[3*m+u]=a/2,e[3*m+l]=0,e[3*m+c]=0,e[3*m+u]=a>=0?1:-1,s[2*m]=n/h,s[2*m+1]=1-y/o,y===o||n===h)continue;let M=f+n+y*(h+1),b=f+n+(y+1)*(h+1),_=f+n+(y+1)*(h+1)+1,z=f+n+y*(h+1)+1;i[6*p]=M,i[6*p+1]=b,i[6*p+2]=z,i[6*p+3]=b,i[6*p+4]=_,i[6*p+5]=z,p++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{s.r(e),s.d(e,{Euler:()=>n});var i=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const r=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,s=t,i="YXZ"){super(t,e,s),this.order=i,this.onChange=()=>{},this._target=this;const r=["0","1","2"];return new Proxy(this,{set(t,e){const s=Reflect.set(...arguments);return s&&r.includes(e)&&t.onChange(),s}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this._target[0]=t,this.onChange()}set y(t){this._target[1]=t,this.onChange()}set z(t){this._target[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this._target[0]=t,this._target[1]=e,this._target[2]=s,this.onChange(),this)}copy(t){return this._target[0]=t[0],this._target[1]=t[1],this._target[2]=t[2],this.onChange(),this}reorder(t){return this._target.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return i.fromRotationMatrix(this._target,t,e),this.onChange(),this}fromQuaternion(t,e=this.order,s){return r.fromQuaternion(t),this._target.fromRotationMatrix(r,e),s||this.onChange(),this}fromArray(t,e=0){return this._target[0]=t[e],this._target[1]=t[e+1],this._target[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,s)=>{s.r(e),s.d(e,{Mat3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=1,n=0,a=0,h=0,o=1){return super(t,e,s,i,r,n,a,h,o),this}set(t,e,s,r,n,a,h,o,l){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,a,h,o,l),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e=this){return i.rotate(this,e,t),this}scale(t,e=this){return i.scale(this,e,t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromMatrix4(t){return i.fromMat4(this,t),this}fromQuaternion(t){return i.fromQuat(this,t),this}fromBasis(t,e,s){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],s[0],s[1],s[2]),this}inverse(t=this){return i.invert(this,t),this}getNormalMatrix(t){return i.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{s.r(e),s.d(e,{Mat4:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=0,n=1,a=0,h=0,o=0,l=0,c=1,u=0,d=0,g=0,m=0,p=1){return super(t,e,s,i,r,n,a,h,o,l,c,u,d,g,m,p),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,r,n,a,h,o,l,c,u,d,g,m,p,f){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,a,h,o,l,c,u,d,g,m,p,f),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e,s=this){return i.rotate(this,s,t,e),this}scale(t,e=this){return i.scale(this,e,"number"==typeof t?[t,t,t]:t),this}add(t,e){return e?i.add(this,t,e):i.add(this,this,t),this}sub(t,e){return e?i.subtract(this,t,e):i.subtract(this,this,t),this}multiply(t,e){return t.length?e?i.multiply(this,t,e):i.multiply(this,this,t):i.multiplyScalar(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:r}={}){return i.perspective(this,t,e,s,r),this}fromOrthogonal({left:t,right:e,bottom:s,top:r,near:n,far:a}){return i.ortho(this,t,e,s,r,n,a),this}fromQuaternion(t){return i.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return i.invert(this,t),this}compose(t,e,s){return i.compose(this,t,e,s),this}decompose(t,e,s){return i.decompose(this,t,e,s),this}getRotation(t){return i.getRotation(t,this),this}getTranslation(t){return i.getTranslation(t,this),this}getScaling(t){return i.getScaling(t,this),this}getMaxScaleOnAxis(){return i.getMaxScaleOnAxis(this)}lookAt(t,e,s){return i.targetTo(this,t,e,s),this}determinant(){return i.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{s.r(e),s.d(e,{Quat:()=>r});var i=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class r extends Array{constructor(t=0,e=0,s=0,i=1){super(t,e,s,i),this.onChange=()=>{},this._target=this;const r=["0","1","2","3"];return new Proxy(this,{set(t,e){const s=Reflect.set(...arguments);return s&&r.includes(e)&&t.onChange(),s}})}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this._target[0]=t,this.onChange()}set y(t){this._target[1]=t,this.onChange()}set z(t){this._target[2]=t,this.onChange()}set w(t){this._target[3]=t,this.onChange()}identity(){return i.identity(this._target),this.onChange(),this}set(t,e,s,r){return t.length?this.copy(t):(i.set(this._target,t,e,s,r),this.onChange(),this)}rotateX(t){return i.rotateX(this._target,this._target,t),this.onChange(),this}rotateY(t){return i.rotateY(this._target,this._target,t),this.onChange(),this}rotateZ(t){return i.rotateZ(this._target,this._target,t),this.onChange(),this}inverse(t=this._target){return i.invert(this._target,t),this.onChange(),this}conjugate(t=this._target){return i.conjugate(this._target,t),this.onChange(),this}copy(t){return i.copy(this._target,t),this.onChange(),this}normalize(t=this._target){return i.normalize(this._target,t),this.onChange(),this}multiply(t,e){return e?i.multiply(this._target,t,e):i.multiply(this._target,this._target,t),this.onChange(),this}dot(t){return i.dot(this._target,t)}fromMatrix3(t){return i.fromMat3(this._target,t),this.onChange(),this}fromEuler(t,e){return i.fromEuler(this._target,t,t.order),e||this.onChange(),this}fromAxisAngle(t,e){return i.setAxisAngle(this._target,t,e),this.onChange(),this}slerp(t,e){return i.slerp(this._target,this._target,t,e),this.onChange(),this}fromArray(t,e=0){return this._target[0]=t[e],this._target[1]=t[e+1],this._target[2]=t[e+2],this._target[3]=t[e+3],this.onChange(),this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{s.r(e),s.d(e,{Vec3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class r extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(i.set(this,t,e,s),this)}copy(t){return i.copy(this,t),this}add(t,e){return e?i.add(this,t,e):i.add(this,this,t),this}sub(t,e){return e?i.subtract(this,t,e):i.subtract(this,this,t),this}multiply(t){return t.length?i.multiply(this,this,t):i.scale(this,this,t),this}divide(t){return t.length?i.divide(this,this,t):i.scale(this,this,1/t),this}inverse(t=this){return i.inverse(this,t),this}len(){return i.length(this)}distance(t){return t?i.distance(this,t):i.length(this)}squaredLen(){return i.squaredLength(this)}squaredDistance(t){return t?i.squaredDistance(this,t):i.squaredLength(this)}negate(t=this){return i.negate(this,t),this}cross(t,e){return e?i.cross(this,t,e):i.cross(this,this,t),this}scale(t){return i.scale(this,this,t),this}normalize(){return i.normalize(this,this),this}dot(t){return i.dot(this,t)}equals(t){return i.exactEquals(this,t)}applyMatrix3(t){return i.transformMat3(this,this,t),this}applyMatrix4(t){return i.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return i.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return i.transformQuat(this,this,t),this}angle(t){return i.angle(this,t)}lerp(t,e){return i.lerp(this,this,t,e),this}clone(){return new r(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],i=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*i,this[1]=t[1]*e+t[5]*s+t[9]*i,this[2]=t[2]*e+t[6]*s+t[10]*i,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{function i(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>i})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,copy:()=>n,determinant:()=>c,fromMat4:()=>i,fromQuat:()=>r,identity:()=>h,invert:()=>l,multiply:()=>u,multiplyScalar:()=>y,normalFromMat4:()=>p,projection:()=>f,rotate:()=>g,scale:()=>m,set:()=>a,subtract:()=>w,translate:()=>d,transpose:()=>o});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=s+s,h=i+i,o=r+r,l=s*a,c=i*a,u=i*h,d=r*a,g=r*h,m=r*o,p=n*a,f=n*h,x=n*o;return t[0]=1-u-m,t[3]=c-x,t[6]=d+f,t[1]=c+x,t[4]=1-l-m,t[7]=g-p,t[2]=d-f,t[5]=g+p,t[8]=1-l-u,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function a(t,e,s,i,r,n,a,h,o,l){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=a,t[6]=h,t[7]=o,t[8]=l,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function o(t,e){if(t===e){let s=e[1],i=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=s,t[5]=e[7],t[6]=i,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=e[4],h=e[5],o=e[6],l=e[7],c=e[8],u=c*a-h*l,d=-c*n+h*o,g=l*n-a*o,m=s*u+i*d+r*g;return m?(m=1/m,t[0]=u*m,t[1]=(-c*i+r*l)*m,t[2]=(h*i-r*a)*m,t[3]=d*m,t[4]=(c*s-r*o)*m,t[5]=(-h*s+r*n)*m,t[6]=g*m,t[7]=(-l*s+i*o)*m,t[8]=(a*s-i*n)*m,t):null}function c(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],a=t[5],h=t[6],o=t[7],l=t[8];return e*(l*n-a*o)+s*(-l*r+a*h)+i*(o*r-n*h)}function u(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],c=e[7],u=e[8],d=s[0],g=s[1],m=s[2],p=s[3],f=s[4],x=s[5],w=s[6],y=s[7],v=s[8];return t[0]=d*i+g*a+m*l,t[1]=d*r+g*h+m*c,t[2]=d*n+g*o+m*u,t[3]=p*i+f*a+x*l,t[4]=p*r+f*h+x*c,t[5]=p*n+f*o+x*u,t[6]=w*i+y*a+v*l,t[7]=w*r+y*h+v*c,t[8]=w*n+y*o+v*u,t}function d(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],c=e[7],u=e[8],d=s[0],g=s[1];return t[0]=i,t[1]=r,t[2]=n,t[3]=a,t[4]=h,t[5]=o,t[6]=d*i+g*a+l,t[7]=d*r+g*h+c,t[8]=d*n+g*o+u,t}function g(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],c=e[7],u=e[8],d=Math.sin(s),g=Math.cos(s);return t[0]=g*i+d*a,t[1]=g*r+d*h,t[2]=g*n+d*o,t[3]=g*a-d*i,t[4]=g*h-d*r,t[5]=g*o-d*n,t[6]=l,t[7]=c,t[8]=u,t}function m(t,e,s){let i=s[0],r=s[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=e[4],h=e[5],o=e[6],l=e[7],c=e[8],u=e[9],d=e[10],g=e[11],m=e[12],p=e[13],f=e[14],x=e[15],w=s*h-i*a,y=s*o-r*a,v=s*l-n*a,M=i*o-r*h,b=i*l-n*h,_=r*l-n*o,z=c*p-u*m,A=c*f-d*m,E=c*x-g*m,C=u*f-d*p,T=u*x-g*p,P=d*x-g*f,S=w*P-y*T+v*C+M*E-b*A+_*z;return S?(S=1/S,t[0]=(h*P-o*T+l*C)*S,t[1]=(o*E-a*P-l*A)*S,t[2]=(a*T-h*E+l*z)*S,t[3]=(r*T-i*P-n*C)*S,t[4]=(s*P-r*E+n*A)*S,t[5]=(i*E-s*T-n*z)*S,t[6]=(p*_-f*b+x*M)*S,t[7]=(f*v-m*_-x*y)*S,t[8]=(m*b-p*v+x*w)*S,t):null}function f(t,e,s){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/s,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t}function w(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t}function y(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>E,compose:()=>v,copy:()=>n,decompose:()=>y,determinant:()=>c,fromQuat:()=>b,fromRotationTranslationScale:()=>M,getMaxScaleOnAxis:()=>x,getRotation:()=>w,getScaling:()=>f,getTranslation:()=>p,identity:()=>h,invert:()=>l,multiply:()=>u,multiplyScalar:()=>T,ortho:()=>z,perspective:()=>_,rotate:()=>m,scale:()=>g,set:()=>a,subtract:()=>C,targetTo:()=>A,translate:()=>d,transpose:()=>o});var i=s("./node_modules/ogl/src/math/functions/Vec3Func.js");const r=1e-6;function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function a(t,e,s,i,r,n,a,h,o,l,c,u,d,g,m,p,f){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=a,t[6]=h,t[7]=o,t[8]=l,t[9]=c,t[10]=u,t[11]=d,t[12]=g,t[13]=m,t[14]=p,t[15]=f,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function o(t,e){if(t===e){let s=e[1],i=e[2],r=e[3],n=e[6],a=e[7],h=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=i,t[9]=n,t[11]=e[14],t[12]=r,t[13]=a,t[14]=h}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function l(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=e[4],h=e[5],o=e[6],l=e[7],c=e[8],u=e[9],d=e[10],g=e[11],m=e[12],p=e[13],f=e[14],x=e[15],w=s*h-i*a,y=s*o-r*a,v=s*l-n*a,M=i*o-r*h,b=i*l-n*h,_=r*l-n*o,z=c*p-u*m,A=c*f-d*m,E=c*x-g*m,C=u*f-d*p,T=u*x-g*p,P=d*x-g*f,S=w*P-y*T+v*C+M*E-b*A+_*z;return S?(S=1/S,t[0]=(h*P-o*T+l*C)*S,t[1]=(r*T-i*P-n*C)*S,t[2]=(p*_-f*b+x*M)*S,t[3]=(d*b-u*_-g*M)*S,t[4]=(o*E-a*P-l*A)*S,t[5]=(s*P-r*E+n*A)*S,t[6]=(f*v-m*_-x*y)*S,t[7]=(c*_-d*v+g*y)*S,t[8]=(a*T-h*E+l*z)*S,t[9]=(i*E-s*T-n*z)*S,t[10]=(m*b-p*v+x*w)*S,t[11]=(u*v-c*b-g*w)*S,t[12]=(h*A-a*C-o*z)*S,t[13]=(s*C-i*A+r*z)*S,t[14]=(p*y-m*M-f*w)*S,t[15]=(c*M-u*y+d*w)*S,t):null}function c(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],a=t[5],h=t[6],o=t[7],l=t[8],c=t[9],u=t[10],d=t[11],g=t[12],m=t[13],p=t[14],f=t[15];return(e*a-s*n)*(u*f-d*p)-(e*h-i*n)*(c*f-d*m)+(e*o-r*n)*(c*p-u*m)+(s*h-i*a)*(l*f-d*g)-(s*o-r*a)*(l*p-u*g)+(i*o-r*h)*(l*m-c*g)}function u(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],c=e[7],u=e[8],d=e[9],g=e[10],m=e[11],p=e[12],f=e[13],x=e[14],w=e[15],y=s[0],v=s[1],M=s[2],b=s[3];return t[0]=y*i+v*h+M*u+b*p,t[1]=y*r+v*o+M*d+b*f,t[2]=y*n+v*l+M*g+b*x,t[3]=y*a+v*c+M*m+b*w,y=s[4],v=s[5],M=s[6],b=s[7],t[4]=y*i+v*h+M*u+b*p,t[5]=y*r+v*o+M*d+b*f,t[6]=y*n+v*l+M*g+b*x,t[7]=y*a+v*c+M*m+b*w,y=s[8],v=s[9],M=s[10],b=s[11],t[8]=y*i+v*h+M*u+b*p,t[9]=y*r+v*o+M*d+b*f,t[10]=y*n+v*l+M*g+b*x,t[11]=y*a+v*c+M*m+b*w,y=s[12],v=s[13],M=s[14],b=s[15],t[12]=y*i+v*h+M*u+b*p,t[13]=y*r+v*o+M*d+b*f,t[14]=y*n+v*l+M*g+b*x,t[15]=y*a+v*c+M*m+b*w,t}function d(t,e,s){let i,r,n,a,h,o,l,c,u,d,g,m,p=s[0],f=s[1],x=s[2];return e===t?(t[12]=e[0]*p+e[4]*f+e[8]*x+e[12],t[13]=e[1]*p+e[5]*f+e[9]*x+e[13],t[14]=e[2]*p+e[6]*f+e[10]*x+e[14],t[15]=e[3]*p+e[7]*f+e[11]*x+e[15]):(i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],c=e[7],u=e[8],d=e[9],g=e[10],m=e[11],t[0]=i,t[1]=r,t[2]=n,t[3]=a,t[4]=h,t[5]=o,t[6]=l,t[7]=c,t[8]=u,t[9]=d,t[10]=g,t[11]=m,t[12]=i*p+h*f+u*x+e[12],t[13]=r*p+o*f+d*x+e[13],t[14]=n*p+l*f+g*x+e[14],t[15]=a*p+c*f+m*x+e[15]),t}function g(t,e,s){let i=s[0],r=s[1],n=s[2];return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function m(t,e,s,i){let n,a,h,o,l,c,u,d,g,m,p,f,x,w,y,v,M,b,_,z,A,E,C,T,P=i[0],S=i[1],j=i[2],F=Math.hypot(P,S,j);return Math.abs(F)<r?null:(F=1/F,P*=F,S*=F,j*=F,n=Math.sin(s),a=Math.cos(s),h=1-a,o=e[0],l=e[1],c=e[2],u=e[3],d=e[4],g=e[5],m=e[6],p=e[7],f=e[8],x=e[9],w=e[10],y=e[11],v=P*P*h+a,M=S*P*h+j*n,b=j*P*h-S*n,_=P*S*h-j*n,z=S*S*h+a,A=j*S*h+P*n,E=P*j*h+S*n,C=S*j*h-P*n,T=j*j*h+a,t[0]=o*v+d*M+f*b,t[1]=l*v+g*M+x*b,t[2]=c*v+m*M+w*b,t[3]=u*v+p*M+y*b,t[4]=o*_+d*z+f*A,t[5]=l*_+g*z+x*A,t[6]=c*_+m*z+w*A,t[7]=u*_+p*z+y*A,t[8]=o*E+d*C+f*T,t[9]=l*E+g*C+x*T,t[10]=c*E+m*C+w*T,t[11]=u*E+p*C+y*T,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function p(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function f(t,e){let s=e[0],i=e[1],r=e[2],n=e[4],a=e[5],h=e[6],o=e[8],l=e[9],c=e[10];return t[0]=Math.hypot(s,i,r),t[1]=Math.hypot(n,a,h),t[2]=Math.hypot(o,l,c),t}function x(t){let e=t[0],s=t[1],i=t[2],r=t[4],n=t[5],a=t[6],h=t[8],o=t[9],l=t[10];const c=e*e+s*s+i*i,u=r*r+n*n+a*a,d=h*h+o*o+l*l;return Math.sqrt(Math.max(c,u,d))}const w=function(){const t=[1,1,1];return function(e,s){let i=t;f(i,s);let r=1/i[0],n=1/i[1],a=1/i[2],h=s[0]*r,o=s[1]*n,l=s[2]*a,c=s[4]*r,u=s[5]*n,d=s[6]*a,g=s[8]*r,m=s[9]*n,p=s[10]*a,x=h+u+p,w=0;return x>0?(w=2*Math.sqrt(x+1),e[3]=.25*w,e[0]=(d-m)/w,e[1]=(g-l)/w,e[2]=(o-c)/w):h>u&&h>p?(w=2*Math.sqrt(1+h-u-p),e[3]=(d-m)/w,e[0]=.25*w,e[1]=(o+c)/w,e[2]=(g+l)/w):u>p?(w=2*Math.sqrt(1+u-h-p),e[3]=(g-l)/w,e[0]=(o+c)/w,e[1]=.25*w,e[2]=(d+m)/w):(w=2*Math.sqrt(1+p-h-u),e[3]=(o-c)/w,e[0]=(g+l)/w,e[1]=(d+m)/w,e[2]=.25*w),e}}();function y(t,e,s,r){let n=i.length([t[0],t[1],t[2]]);const a=i.length([t[4],t[5],t[6]]),h=i.length([t[8],t[9],t[10]]);c(t)<0&&(n=-n),s[0]=t[12],s[1]=t[13],s[2]=t[14];const o=t.slice(),l=1/n,u=1/a,d=1/h;o[0]*=l,o[1]*=l,o[2]*=l,o[4]*=u,o[5]*=u,o[6]*=u,o[8]*=d,o[9]*=d,o[10]*=d,w(e,o),r[0]=n,r[1]=a,r[2]=h}function v(t,e,s,i){const r=t,n=e[0],a=e[1],h=e[2],o=e[3],l=n+n,c=a+a,u=h+h,d=n*l,g=n*c,m=n*u,p=a*c,f=a*u,x=h*u,w=o*l,y=o*c,v=o*u,M=i[0],b=i[1],_=i[2];return r[0]=(1-(p+x))*M,r[1]=(g+v)*M,r[2]=(m-y)*M,r[3]=0,r[4]=(g-v)*b,r[5]=(1-(d+x))*b,r[6]=(f+w)*b,r[7]=0,r[8]=(m+y)*_,r[9]=(f-w)*_,r[10]=(1-(d+p))*_,r[11]=0,r[12]=s[0],r[13]=s[1],r[14]=s[2],r[15]=1,r}function M(t,e,s,i){let r=e[0],n=e[1],a=e[2],h=e[3],o=r+r,l=n+n,c=a+a,u=r*o,d=r*l,g=r*c,m=n*l,p=n*c,f=a*c,x=h*o,w=h*l,y=h*c,v=i[0],M=i[1],b=i[2];return t[0]=(1-(m+f))*v,t[1]=(d+y)*v,t[2]=(g-w)*v,t[3]=0,t[4]=(d-y)*M,t[5]=(1-(u+f))*M,t[6]=(p+x)*M,t[7]=0,t[8]=(g+w)*b,t[9]=(p-x)*b,t[10]=(1-(u+m))*b,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function b(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=s+s,h=i+i,o=r+r,l=s*a,c=i*a,u=i*h,d=r*a,g=r*h,m=r*o,p=n*a,f=n*h,x=n*o;return t[0]=1-u-m,t[1]=c+x,t[2]=d-f,t[3]=0,t[4]=c-x,t[5]=1-l-m,t[6]=g+p,t[7]=0,t[8]=d+f,t[9]=g-p,t[10]=1-l-u,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function _(t,e,s,i,r){let n=1/Math.tan(e/2),a=1/(i-r);return t[0]=n/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(r+i)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*r*i*a,t[15]=0,t}function z(t,e,s,i,r,n,a){let h=1/(e-s),o=1/(i-r),l=1/(n-a);return t[0]=-2*h,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+s)*h,t[13]=(r+i)*o,t[14]=(a+n)*l,t[15]=1,t}function A(t,e,s,i){let r=e[0],n=e[1],a=e[2],h=i[0],o=i[1],l=i[2],c=r-s[0],u=n-s[1],d=a-s[2],g=c*c+u*u+d*d;0===g?d=1:(g=1/Math.sqrt(g),c*=g,u*=g,d*=g);let m=o*d-l*u,p=l*c-h*d,f=h*u-o*c;return g=m*m+p*p+f*f,0===g&&(l?h+=1e-6:o?l+=1e-6:o+=1e-6,m=o*d-l*u,p=l*c-h*d,f=h*u-o*c,g=m*m+p*p+f*f),g=1/Math.sqrt(g),m*=g,p*=g,f*=g,t[0]=m,t[1]=p,t[2]=f,t[3]=0,t[4]=u*f-d*p,t[5]=d*m-c*f,t[6]=c*p-u*m,t[7]=0,t[8]=c,t[9]=u,t[10]=d,t[11]=0,t[12]=r,t[13]=n,t[14]=a,t[15]=1,t}function E(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function C(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function T(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,conjugate:()=>d,copy:()=>p,dot:()=>y,fromEuler:()=>m,fromMat3:()=>g,identity:()=>r,invert:()=>u,length:()=>M,lerp:()=>v,multiply:()=>a,normalize:()=>b,rotateX:()=>h,rotateY:()=>o,rotateZ:()=>l,scale:()=>w,set:()=>f,setAxisAngle:()=>n,slerp:()=>c});var i=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function r(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,s){s*=.5;let i=Math.sin(s);return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=Math.cos(s),t}function a(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=s[0],o=s[1],l=s[2],c=s[3];return t[0]=i*c+a*h+r*l-n*o,t[1]=r*c+a*o+n*h-i*l,t[2]=n*c+a*l+i*o-r*h,t[3]=a*c-i*h-r*o-n*l,t}function h(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=i*o+a*h,t[1]=r*o+n*h,t[2]=n*o-r*h,t[3]=a*o-i*h,t}function o(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=i*o-n*h,t[1]=r*o+a*h,t[2]=n*o+i*h,t[3]=a*o-r*h,t}function l(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=i*o+r*h,t[1]=r*o-i*h,t[2]=n*o+a*h,t[3]=a*o-n*h,t}function c(t,e,s,i){let r,n,a,h,o,l=e[0],c=e[1],u=e[2],d=e[3],g=s[0],m=s[1],p=s[2],f=s[3];return n=l*g+c*m+u*p+d*f,n<0&&(n=-n,g=-g,m=-m,p=-p,f=-f),1-n>1e-6?(r=Math.acos(n),a=Math.sin(r),h=Math.sin((1-i)*r)/a,o=Math.sin(i*r)/a):(h=1-i,o=i),t[0]=h*l+o*g,t[1]=h*c+o*m,t[2]=h*u+o*p,t[3]=h*d+o*f,t}function u(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=s*s+i*i+r*r+n*n,h=a?1/a:0;return t[0]=-s*h,t[1]=-i*h,t[2]=-r*h,t[3]=n*h,t}function d(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function g(t,e){let s,i=e[0]+e[4]+e[8];if(i>0)s=Math.sqrt(i+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);let r=(i+1)%3,n=(i+2)%3;s=Math.sqrt(e[3*i+i]-e[3*r+r]-e[3*n+n]+1),t[i]=.5*s,s=.5/s,t[3]=(e[3*r+n]-e[3*n+r])*s,t[r]=(e[3*r+i]+e[3*i+r])*s,t[n]=(e[3*n+i]+e[3*i+n])*s}return t}function m(t,e,s="YXZ"){let i=Math.sin(.5*e[0]),r=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),a=Math.cos(.5*e[1]),h=Math.sin(.5*e[2]),o=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=i*a*o+r*n*h,t[1]=r*n*o-i*a*h,t[2]=r*a*h+i*n*o,t[3]=r*a*o-i*n*h):"YXZ"===s?(t[0]=i*a*o+r*n*h,t[1]=r*n*o-i*a*h,t[2]=r*a*h-i*n*o,t[3]=r*a*o+i*n*h):"ZXY"===s?(t[0]=i*a*o-r*n*h,t[1]=r*n*o+i*a*h,t[2]=r*a*h+i*n*o,t[3]=r*a*o-i*n*h):"ZYX"===s?(t[0]=i*a*o-r*n*h,t[1]=r*n*o+i*a*h,t[2]=r*a*h-i*n*o,t[3]=r*a*o+i*n*h):"YZX"===s?(t[0]=i*a*o+r*n*h,t[1]=r*n*o+i*a*h,t[2]=r*a*h-i*n*o,t[3]=r*a*o-i*n*h):"XZY"===s&&(t[0]=i*a*o-r*n*h,t[1]=r*n*o-i*a*h,t[2]=r*a*h+i*n*o,t[3]=r*a*o+i*n*h),t}const p=i.copy,f=i.set,x=i.add,w=i.scale,y=i.dot,v=i.lerp,M=i.length,b=i.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>a,angle:()=>z,copy:()=>r,cross:()=>w,distance:()=>u,divide:()=>l,dot:()=>x,exactEquals:()=>A,inverse:()=>p,length:()=>i,lerp:()=>y,multiply:()=>o,negate:()=>m,normalize:()=>f,scale:()=>c,scaleRotateMat4:()=>M,set:()=>n,squaredDistance:()=>d,squaredLength:()=>g,subtract:()=>h,transformMat3:()=>b,transformMat4:()=>v,transformQuat:()=>_});function i(t){let e=t[0],s=t[1],i=t[2];return Math.sqrt(e*e+s*s+i*i)}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,s,i){return t[0]=e,t[1]=s,t[2]=i,t}function a(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function h(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function o(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function l(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function c(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function u(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(s*s+i*i+r*r)}function d(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return s*s+i*i+r*r}function g(t){let e=t[0],s=t[1],i=t[2];return e*e+s*s+i*i}function m(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function p(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function f(t,e){let s=e[0],i=e[1],r=e[2],n=s*s+i*i+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function x(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function w(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[0],h=s[1],o=s[2];return t[0]=r*o-n*h,t[1]=n*a-i*o,t[2]=i*h-r*a,t}function y(t,e,s,i){let r=e[0],n=e[1],a=e[2];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=a+i*(s[2]-a),t}function v(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[3]*i+s[7]*r+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*i+s[4]*r+s[8]*n+s[12])/a,t[1]=(s[1]*i+s[5]*r+s[9]*n+s[13])/a,t[2]=(s[2]*i+s[6]*r+s[10]*n+s[14])/a,t}function M(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[3]*i+s[7]*r+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*i+s[4]*r+s[8]*n)/a,t[1]=(s[1]*i+s[5]*r+s[9]*n)/a,t[2]=(s[2]*i+s[6]*r+s[10]*n)/a,t}function b(t,e,s){let i=e[0],r=e[1],n=e[2];return t[0]=i*s[0]+r*s[3]+n*s[6],t[1]=i*s[1]+r*s[4]+n*s[7],t[2]=i*s[2]+r*s[5]+n*s[8],t}function _(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[0],h=s[1],o=s[2],l=h*n-o*r,c=o*i-a*n,u=a*r-h*i,d=h*u-o*c,g=o*l-a*u,m=a*c-h*l,p=2*s[3];return l*=p,c*=p,u*=p,d*=2,g*=2,m*=2,t[0]=i+l+d,t[1]=r+c+g,t[2]=n+u+m,t}const z=function(){const t=[0,0,0],e=[0,0,0];return function(s,i){r(t,s),r(e,i),f(t,t),f(e,e);let n=x(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function A(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>n,copy:()=>i,dot:()=>l,length:()=>h,lerp:()=>c,normalize:()=>o,scale:()=>a,set:()=>r});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function r(t,e,s,i,r){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t}function n(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function a(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function h(t){let e=t[0],s=t[1],i=t[2],r=t[3];return Math.sqrt(e*e+s*s+i*i+r*r)}function o(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=s*s+i*i+r*r+n*n;return a>0&&(a=1/Math.sqrt(a)),t[0]=s*a,t[1]=i*a,t[2]=r*a,t[3]=n*a,t}function l(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function c(t,e,s,i){let r=e[0],n=e[1],a=e[2],h=e[3];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=a+i*(s[2]-a),t[3]=h+i*(s[3]-h),t}}},(function(t){t.h=()=>"f11c49a4eb170beae628"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,